{
  "api/RandomToolbox.html": {
    "href": "api/RandomToolbox.html",
    "title": "Namespace RandomToolbox | Random Toolbox",
    "keywords": "Namespace RandomToolbox Classes Partition Partition.Element Partition<T> Partition<T>.Element PartitionBase The base class is used for PropertyDrawer declaration and shared methods between the 2 derived class PartitionBase.ElementBase Base class for PropertyDrawer PartitionDrawer Property drawer for both void and generic partition PartitionElementDrawer drawer for elements in the list of a partition PartitionTester RandomSourceBase Base class for Seed System RandomSourceBaseSO Base class for RandomSource contained in ScriptableObjects RandomSourcesTests SeedGenerators Class for seed generation SystemRandomSource Safe Random source based on System.Random SystemRandomSourceSO A SystemRandomSource instance contained in a ScriptableObject to be used in different scenes UnityRandomSource Safe Random source based on UnityEngine.Random UnityRandomSourceSO A unityRandomSource instance contained in a ScriptableObject to be used in different scenes Structs SystemRandomSource.State Used to save System.Random state Enums PartitionBase.CorrectionRule SeedGenerators.Generator Allow to easily select a static seed generator in editor"
  },
  "api/RandomToolbox.Partition.Element.html": {
    "href": "api/RandomToolbox.Partition.Element.html",
    "title": "Class Partition.Element | Random Toolbox",
    "keywords": "Class Partition.Element Inheritance Object PartitionBase.ElementBase Partition.Element Inherited Members PartitionBase.ElementBase.Color PartitionBase.ElementBase.Value Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class Element : PartitionBase.ElementBase"
  },
  "api/RandomToolbox.Partition.html": {
    "href": "api/RandomToolbox.Partition.html",
    "title": "Class Partition | Random Toolbox",
    "keywords": "Class Partition Inheritance Object PartitionBase Partition Inherited Members PartitionBase.IsCorrect PartitionBase.GetIndex(Single) PartitionBase.SetValues(Single[], PartitionBase.CorrectionRule) PartitionBase.SetValue(Int32, Single, PartitionBase.CorrectionRule) PartitionBase.CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single) PartitionBase.DefaultPartitionCorrection(Single[]) PartitionBase.CorrectPartition(Single[], PartitionBase.CorrectionRule, Int32, Single, Single) Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class Partition : PartitionBase Fields Elements List of Elements in the partition Declaration public List<Partition.Element> Elements Field Value Type Description List < Partition.Element > Properties _elements Declaration protected override IReadOnlyList<PartitionBase.ElementBase> _elements { get; } Property Value Type Description IReadOnlyList < PartitionBase.ElementBase > Overrides PartitionBase._elements Methods AddElement(Partition.Element, PartitionBase.CorrectionRule, Single, Single) Declaration public void AddElement(Partition.Element element, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Partition.Element element PartitionBase.CorrectionRule rule Single minValue Single maxValue AddElement(Single, PartitionBase.CorrectionRule, Single, Single) Declaration public void AddElement(float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Single value PartitionBase.CorrectionRule rule Single minValue Single maxValue GetElement(Single) Shorthand for Elements[GetIndex(value)] Declaration public Partition.Element GetElement(float value) Parameters Type Name Description Single value value in the 0-1 range Returns Type Description Partition.Element null if no element found RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single) Declaration public void RemoveElementAt(int index, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Int32 index PartitionBase.CorrectionRule rule Single minValue Single maxValue"
  },
  "api/RandomToolbox.Partition-1.Element.html": {
    "href": "api/RandomToolbox.Partition-1.Element.html",
    "title": "Class Partition<T>.Element | Random Toolbox",
    "keywords": "Class Partition<T>.Element Inheritance Object PartitionBase.ElementBase Partition<T>.Element Inherited Members PartitionBase.ElementBase.Color PartitionBase.ElementBase.Value Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class Element : PartitionBase.ElementBase Fields Object Corresponding data for the elements Declaration public T Object Field Value Type Description T"
  },
  "api/RandomToolbox.Partition-1.html": {
    "href": "api/RandomToolbox.Partition-1.html",
    "title": "Class Partition<T> | Random Toolbox",
    "keywords": "Class Partition<T> Inheritance Object PartitionBase Partition<T> Inherited Members PartitionBase.IsCorrect PartitionBase.GetIndex(Single) PartitionBase.SetValues(Single[], PartitionBase.CorrectionRule) PartitionBase.SetValue(Int32, Single, PartitionBase.CorrectionRule) PartitionBase.CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single) PartitionBase.DefaultPartitionCorrection(Single[]) PartitionBase.CorrectPartition(Single[], PartitionBase.CorrectionRule, Int32, Single, Single) Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class Partition<T> : PartitionBase Type Parameters Name Description T Fields Elements List of Elements in the partition Declaration public List<Partition<T>.Element> Elements Field Value Type Description List < Partition.Element <>> Properties _elements Declaration protected override IReadOnlyList<PartitionBase.ElementBase> _elements { get; } Property Value Type Description IReadOnlyList < PartitionBase.ElementBase > Overrides PartitionBase._elements Methods AddElement(Partition<T>.Element, PartitionBase.CorrectionRule, Single, Single) Declaration public void AddElement(Partition<T>.Element element, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Partition.Element <> element PartitionBase.CorrectionRule rule Single minValue Single maxValue AddElement(Single, PartitionBase.CorrectionRule, Single, Single) Declaration public void AddElement(float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Single value PartitionBase.CorrectionRule rule Single minValue Single maxValue Contains(T) Declaration public bool Contains(T obj) Parameters Type Name Description T obj Returns Type Description Boolean GetElement(Single) Shorthand for Elements[GetIndex(value)] Declaration public Partition<T>.Element GetElement(float value) Parameters Type Name Description Single value value in the 0-1 range Returns Type Description Partition.Element <> null if no element found GetObject(Single) Shorthand for Elements[GetIndex(value)].Object Declaration public T GetObject(float value) Parameters Type Name Description Single value value in the 0-1 range Returns Type Description T default if no element found GetObject(Single, out T) Declaration public bool GetObject(float value, out T Object) Parameters Type Name Description Single value T Object Returns Type Description Boolean RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single) Declaration public void RemoveElementAt(int index, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Int32 index PartitionBase.CorrectionRule rule Single minValue Single maxValue"
  },
  "api/RandomToolbox.PartitionBase.CorrectionRule.html": {
    "href": "api/RandomToolbox.PartitionBase.CorrectionRule.html",
    "title": "Enum PartitionBase.CorrectionRule | Random Toolbox",
    "keywords": "Enum PartitionBase.CorrectionRule Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public enum CorrectionRule Fields Name Description AdjustAll AdjustLeftAndRight AdjustLeftOnly AdjustRightOnly Default None"
  },
  "api/RandomToolbox.PartitionBase.ElementBase.html": {
    "href": "api/RandomToolbox.PartitionBase.ElementBase.html",
    "title": "Class PartitionBase.ElementBase | Random Toolbox",
    "keywords": "Class PartitionBase.ElementBase Base class for PropertyDrawer Inheritance Object PartitionBase.ElementBase Partition.Element Partition<T>.Element Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class ElementBase Fields Color Color of the part in inspector Declaration public Color Color Field Value Type Description Color Value Allocated amount Declaration public float Value Field Value Type Description Single"
  },
  "api/RandomToolbox.PartitionBase.html": {
    "href": "api/RandomToolbox.PartitionBase.html",
    "title": "Class PartitionBase | Random Toolbox",
    "keywords": "Class PartitionBase The base class is used for PropertyDrawer declaration and shared methods between the 2 derived class Inheritance Object PartitionBase Partition Partition<T> Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class PartitionBase Properties _elements overriden in derived class to give this class access to partition elements Declaration protected abstract IReadOnlyList<PartitionBase.ElementBase> _elements { get; } Property Value Type Description IReadOnlyList < PartitionBase.ElementBase > IsCorrect True if the sum of all elements value is equal to 1.0 Declaration public bool IsCorrect { get; } Property Value Type Description Boolean Methods CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single) Declaration public void CorrectPartition(PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, int lastEditedValueIndex = 0, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description PartitionBase.CorrectionRule rule Int32 lastEditedValueIndex Single minValue Single maxValue CorrectPartition(Single[], PartitionBase.CorrectionRule, Int32, Single, Single) Correct a partition if the sum of value is not equal to 1.0 Declaration public static void CorrectPartition(float[] values, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, int lastEditedValueIndex = 0, float minValue = 0F, float maxValue = 1F) Parameters Type Name Description Single [] values values of the partition PartitionBase.CorrectionRule rule the rule to use when editing values PartitionBase.CorrectionRule Int32 lastEditedValueIndex specify the last edited value if you don't want it to be changed Single minValue specify a mininum to use when editing partition values (can't be more than 1/n) Single maxValue specify a maximum to use when editing partition values (can't be less than 1/n) DefaultPartitionCorrection(Single[]) Check a partition, and apply Default correction Declaration public static void DefaultPartitionCorrection(float[] values) Parameters Type Name Description Single [] values an array of values GetIndex(Single) Return the index of elements at the given value in the partition range Declaration public int GetIndex(float value) Parameters Type Name Description Single value value in the 0-1 range Returns Type Description Int32 Return 0 if given value is lower than 0, last index of elements list if value is more than 1, or -1 if list is empty SetValue(Int32, Single, PartitionBase.CorrectionRule) Declaration public void SetValue(int index, float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll) Parameters Type Name Description Int32 index Single value PartitionBase.CorrectionRule rule SetValues(Single[], PartitionBase.CorrectionRule) Set the values for all elements in the partitions. If the number of given value is lower than the current number of elements, the remaining elements value will be set to zero. If the number of given value is higher than the current number of elements, the remaining given value will be ignored. If the sum of values is not equal to 1.0, the partition will be corrected using the given correction rule (or the default one) Declaration public virtual void SetValues(float[] values, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll) Parameters Type Name Description Single [] values An array of float value that sum up to 1.0 PartitionBase.CorrectionRule rule The correction rule to use if the sum is not 1.0"
  },
  "api/RandomToolbox.PartitionDrawer.html": {
    "href": "api/RandomToolbox.PartitionDrawer.html",
    "title": "Class PartitionDrawer | Random Toolbox",
    "keywords": "Class PartitionDrawer Property drawer for both void and generic partition Inheritance Object PartitionDrawer Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class PartitionDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/RandomToolbox.PartitionElementDrawer.html": {
    "href": "api/RandomToolbox.PartitionElementDrawer.html",
    "title": "Class PartitionElementDrawer | Random Toolbox",
    "keywords": "Class PartitionElementDrawer drawer for elements in the list of a partition Inheritance Object PartitionElementDrawer Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class PartitionElementDrawer : PropertyDrawer Methods GetIndexFromPath(String) Get the index of a serialized property in a serialized array Declaration public static int GetIndexFromPath(string path) Parameters Type Name Description String path SerializedProperty.propertyPath Returns Type Description Int32 index or -1 if not found GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/RandomToolbox.PartitionTester.html": {
    "href": "api/RandomToolbox.PartitionTester.html",
    "title": "Class PartitionTester | Random Toolbox",
    "keywords": "Class PartitionTester Inheritance Object PartitionTester Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class PartitionTester Methods NoPartitionCorrectionWhenSumIsOne() Declaration public void NoPartitionCorrectionWhenSumIsOne() PartitionCorrectionWhenSumTooHigh() Declaration public void PartitionCorrectionWhenSumTooHigh() PartitionCorrectionWhenSumTooLow() Declaration public void PartitionCorrectionWhenSumTooLow() TestAddElement() Declaration public void TestAddElement() TestAddElementGeneric() Declaration public void TestAddElementGeneric()"
  },
  "api/RandomToolbox.RandomSourceBase.html": {
    "href": "api/RandomToolbox.RandomSourceBase.html",
    "title": "Class RandomSourceBase | Random Toolbox",
    "keywords": "Class RandomSourceBase Base class for Seed System Inheritance Object RandomSourceBase SystemRandomSource UnityRandomSource Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class RandomSourceBase Fields m_seed Current seed Declaration protected int m_seed Field Value Type Description Int32 SeedGenerator Current select seed generator to use for Reseed() Declaration public SeedGenerators.Generator SeedGenerator Field Value Type Description SeedGenerators.Generator Properties Seed The current seed used Declaration public int Seed { get; } Property Value Type Description Int32 Methods Reseed() Generate a new seed using the current SeedGenerator value and initialize random source this is a shorthand for 'Start(SeedGenerator.GetSeed());' Declaration public void Reseed() Start() Initialize the Seed system with the current seed Declaration public abstract void Start() Start(SeedGenerators.Generator) Initialize the Seed system with a new seed from the given seed generator Declaration public void Start(SeedGenerators.Generator seedGenerator) Parameters Type Name Description SeedGenerators.Generator seedGenerator Generator to use to get a new seed Start(Boolean) If reseed is true, generate a new seed using the current SeedGenerator value and initialize random source Declaration public void Start(bool reseed) Parameters Type Name Description Boolean reseed Start(Int32) Initialize the Seed system with the given new seed Declaration public void Start(int newSeed) Parameters Type Name Description Int32 newSeed seed used to initialize the system"
  },
  "api/RandomToolbox.RandomSourceBaseSO.html": {
    "href": "api/RandomToolbox.RandomSourceBaseSO.html",
    "title": "Class RandomSourceBaseSO | Random Toolbox",
    "keywords": "Class RandomSourceBaseSO Base class for RandomSource contained in ScriptableObjects Inheritance Object RandomSourceBaseSO SystemRandomSourceSO UnityRandomSourceSO Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public abstract class RandomSourceBaseSO : ScriptableObject Properties InitializeOnAwake If True, Start() will be called when ScriptableObnject is Awake Declaration public bool InitializeOnAwake { get; } Property Value Type Description Boolean Instance RandomSource instance contained in this ScriptableObject Declaration public RandomSourceBase Instance { get; } Property Value Type Description RandomSourceBase m_baseInstance Override in derived class to allow the base class acces to the RandomSource instance Declaration protected abstract RandomSourceBase m_baseInstance { get; } Property Value Type Description RandomSourceBase ReseedOnAwake If True, Reseed() will be called when ScriptableObnject is Awake. Since a reseed force a re-init if this field is true, it force 'InitializeOnAwake' to true Declaration public bool ReseedOnAwake { get; } Property Value Type Description Boolean"
  },
  "api/RandomToolbox.RandomSourcesTests.html": {
    "href": "api/RandomToolbox.RandomSourcesTests.html",
    "title": "Class RandomSourcesTests | Random Toolbox",
    "keywords": "Class RandomSourcesTests Inheritance Object RandomSourcesTests Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class RandomSourcesTests Methods ExternUnityEngineRandomCallAsNoImpact() Check that calling directly UnityEngine.Random doesn't impact a UnityRandomSource instance results Declaration public void ExternUnityEngineRandomCallAsNoImpact() MultipleSeedSystemInstanceAsNoImpact() Check that when having multiples UnityRandomSources instances the result of each instance is always the same Declaration public void MultipleSeedSystemInstanceAsNoImpact() SystemRandomSourceSaveAndRestore() Check that saving and restoring a SystemRandomSource instance work Declaration public void SystemRandomSourceSaveAndRestore() UnityRandomSourceRestartDoesntImpactUnityEngineRandom() Check that restarting a UnityRandomSource instance doesn't restart UnityEngine.Random Declaration public void UnityRandomSourceRestartDoesntImpactUnityEngineRandom() UnityRandomSourceSaveAndRestore() Check that saving and restoring a UnityRandomSource instance work Declaration public void UnityRandomSourceSaveAndRestore()"
  },
  "api/RandomToolbox.SeedGenerators.Generator.html": {
    "href": "api/RandomToolbox.SeedGenerators.Generator.html",
    "title": "Enum SeedGenerators.Generator | Random Toolbox",
    "keywords": "Enum SeedGenerators.Generator Allow to easily select a static seed generator in editor Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public enum Generator Fields Name Description CurrentDateTimeBasedSeed SystemStartTimeSeed"
  },
  "api/RandomToolbox.SeedGenerators.html": {
    "href": "api/RandomToolbox.SeedGenerators.html",
    "title": "Class SeedGenerators | Random Toolbox",
    "keywords": "Class SeedGenerators Class for seed generation Inheritance Object SeedGenerators Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public static class SeedGenerators Methods CurrentDateTimeBasedSeed() Get a new seed based on current date and time Declaration public static int CurrentDateTimeBasedSeed() Returns Type Description Int32 Return the result of System.DateTime.Now.Ticks GetSeed(SeedGenerators.Generator) Generate seed from Generator enum value Declaration public static int GetSeed(this SeedGenerators.Generator value) Parameters Type Name Description SeedGenerators.Generator value SeedGenerators.Generator enum value Returns Type Description Int32 new generated seed SystemStartTimeSeed() Get a new seed based on time elapsed since the machine we are running on started Declaration public static int SystemStartTimeSeed() Returns Type Description Int32 Return the result of System.Environment.TickCount"
  },
  "api/RandomToolbox.SystemRandomSource.html": {
    "href": "api/RandomToolbox.SystemRandomSource.html",
    "title": "Class SystemRandomSource | Random Toolbox",
    "keywords": "Class SystemRandomSource Safe Random source based on System.Random Inheritance Object RandomSourceBase SystemRandomSource Inherited Members RandomSourceBase.m_seed RandomSourceBase.SeedGenerator RandomSourceBase.Seed RandomSourceBase.Start(Int32) RandomSourceBase.Start(Boolean) RandomSourceBase.Start(SeedGenerators.Generator) RandomSourceBase.Reseed() Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class SystemRandomSource : RandomSourceBase Constructors SystemRandomSource() Instantiate a new SystemRandomSource but does not initialize it Declaration public SystemRandomSource() SystemRandomSource(Int32) Instantiate a new UnityRandomSource and Initialize with given seed. Declaration public SystemRandomSource(int seed) Parameters Type Name Description Int32 seed Seed to initialize the random generator Methods Next() same as System.Random.Next() Declaration public int Next() Returns Type Description Int32 int Next(Int32) same as System.Random.Next(int maxValue) Declaration public int Next(int maxValue) Parameters Type Name Description Int32 maxValue Returns Type Description Int32 Next(Int32, Int32) same as System.Random.Next(int minValue, int maxValue) Declaration public int Next(int minValue, int maxValue) Parameters Type Name Description Int32 minValue Int32 maxValue Returns Type Description Int32 NextBytes(Byte[]) same as System.Random.NextBytes(byte[] buffer) Declaration public void NextBytes(byte[] buffer) Parameters Type Name Description Byte [] buffer NextDouble() same as System.Random.NextDouble() Declaration public double NextDouble() Returns Type Description Double Restore(SystemRandomSource.State) Restore the random source with the given state Declaration public void Restore(SystemRandomSource.State state) Parameters Type Name Description SystemRandomSource.State state Save() Get the current state to save and restore it later Declaration public SystemRandomSource.State Save() Returns Type Description SystemRandomSource.State Start() Initialize the Seed system with the current seed Declaration public override void Start() Overrides RandomSourceBase.Start()"
  },
  "api/RandomToolbox.SystemRandomSource.State.html": {
    "href": "api/RandomToolbox.SystemRandomSource.State.html",
    "title": "Struct SystemRandomSource.State | Random Toolbox",
    "keywords": "Struct SystemRandomSource.State Used to save System.Random state Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public struct State Fields bytes Declaration public byte[] bytes Field Value Type Description Byte []"
  },
  "api/RandomToolbox.SystemRandomSourceSO.html": {
    "href": "api/RandomToolbox.SystemRandomSourceSO.html",
    "title": "Class SystemRandomSourceSO | Random Toolbox",
    "keywords": "Class SystemRandomSourceSO A SystemRandomSource instance contained in a ScriptableObject to be used in different scenes Inheritance Object RandomSourceBaseSO SystemRandomSourceSO Inherited Members RandomSourceBaseSO.InitializeOnAwake RandomSourceBaseSO.ReseedOnAwake Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class SystemRandomSourceSO : RandomSourceBaseSO Fields Instance SystemRandomSource instance Declaration public SystemRandomSource Instance Field Value Type Description SystemRandomSource Properties m_baseInstance Override to give the base class acces to the derived RandomSourceBase instance Declaration protected override RandomSourceBase m_baseInstance { get; } Property Value Type Description RandomSourceBase Overrides RandomSourceBaseSO.m_baseInstance"
  },
  "api/RandomToolbox.UnityRandomSource.html": {
    "href": "api/RandomToolbox.UnityRandomSource.html",
    "title": "Class UnityRandomSource | Random Toolbox",
    "keywords": "Class UnityRandomSource Safe Random source based on UnityEngine.Random Inheritance Object RandomSourceBase UnityRandomSource Inherited Members RandomSourceBase.m_seed RandomSourceBase.SeedGenerator RandomSourceBase.Seed RandomSourceBase.Start(Int32) RandomSourceBase.Start(Boolean) RandomSourceBase.Start(SeedGenerators.Generator) RandomSourceBase.Reseed() Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax [Serializable] public class UnityRandomSource : RandomSourceBase Constructors UnityRandomSource() Instantiate a new UnityRandomSource but does not initialize it Declaration public UnityRandomSource() UnityRandomSource(SeedGenerators.Generator) Instantiate a new UnityRandomSource with a new generated seed based on given seed generator Declaration public UnityRandomSource(SeedGenerators.Generator seedGenerator) Parameters Type Name Description SeedGenerators.Generator seedGenerator UnityRandomSource(Int32) Instantiate a new UnityRandomSource and Initialize with given seed. Declaration public UnityRandomSource(int seed) Parameters Type Name Description Int32 seed Seed to initialize the random generator Properties insideUnitCircle Returns a random point inside a circle with radius 1 (Read Only). Declaration public Vector2 insideUnitCircle { get; } Property Value Type Description Vector2 insideUnitSphere Returns a random point inside a sphere with radius 1 (Read Only). Declaration public Vector3 insideUnitSphere { get; } Property Value Type Description Vector3 onUnitSphere Returns a random point on the surface of a sphere with radius 1 (Read Only). Declaration public Vector3 onUnitSphere { get; } Property Value Type Description Vector3 rotation Returns a random rotation (Read Only). Declaration public Quaternion rotation { get; } Property Value Type Description Quaternion rotationUniform Returns a random rotation with uniform distribution (Read Only). Declaration public Quaternion rotationUniform { get; } Property Value Type Description Quaternion value Returns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only). Declaration public float value { get; } Property Value Type Description Single Methods ColorHSV() Generates a random color from HSV and alpha ranges. Declaration public Color ColorHSV() Returns Type Description Color A random color with HSV and alpha values in the input ranges. ColorHSV(Single, Single) Generates a random color from HSV and alpha ranges. Declaration public Color ColorHSV(float hueMin, float hueMax) Parameters Type Name Description Single hueMin Minimum hue [0..1]. Single hueMax Maximum hue [0..1]. Returns Type Description Color A random color with HSV and alpha values in the input ranges. ColorHSV(Single, Single, Single, Single) Generates a random color from HSV and alpha ranges. Declaration public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax) Parameters Type Name Description Single hueMin Minimum hue [0..1]. Single hueMax Maximum hue [0..1]. Single saturationMin Minimum saturation [0..1]. Single saturationMax Maximum saturation[0..1]. Returns Type Description Color A random color with HSV and alpha values in the input ranges. ColorHSV(Single, Single, Single, Single, Single, Single) Generates a random color from HSV and alpha ranges. Declaration public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax) Parameters Type Name Description Single hueMin Minimum hue [0..1]. Single hueMax Maximum hue [0..1]. Single saturationMin Minimum saturation [0..1]. Single saturationMax Maximum saturation[0..1]. Single valueMin Minimum value [0..1]. Single valueMax Maximum value [0..1]. Returns Type Description Color A random color with HSV and alpha values in the input ranges. ColorHSV(Single, Single, Single, Single, Single, Single, Single, Single) Generates a random color from HSV and alpha ranges. Declaration public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax, float alphaMin, float alphaMax) Parameters Type Name Description Single hueMin Minimum hue [0..1]. Single hueMax Maximum hue [0..1]. Single saturationMin Minimum saturation [0..1]. Single saturationMax Maximum saturation[0..1]. Single valueMin Minimum value [0..1]. Single valueMax Maximum value [0..1]. Single alphaMin Minimum alpha [0..1]. Single alphaMax Maximum alpha [0..1]. Returns Type Description Color A random color with HSV and alpha values in the input ranges. Range(Int32, Int32) Return a random integer number between min [inclusive] and max exclusive . Declaration public int Range(int min, int max) Parameters Type Name Description Int32 min min int value [inclusive] Int32 max max int value [exclusive] Returns Type Description Int32 random integer number Range(Single, Single) Return a random float number between min [inclusive] and max inclusive . Declaration public float Range(float min, float max) Parameters Type Name Description Single min min float value [inclusive] Single max max float value [inclusive] Returns Type Description Single random float number Restore(Random.State) Restore the random source with the given state Declaration public void Restore(Random.State state) Parameters Type Name Description System.Random.State state Save() Get the current state to save and restore it later Declaration public Random.State Save() Returns Type Description System.Random.State Start() Initialize the Seed system with the current seed Declaration public override void Start() Overrides RandomSourceBase.Start()"
  },
  "api/RandomToolbox.UnityRandomSourceSO.html": {
    "href": "api/RandomToolbox.UnityRandomSourceSO.html",
    "title": "Class UnityRandomSourceSO | Random Toolbox",
    "keywords": "Class UnityRandomSourceSO A unityRandomSource instance contained in a ScriptableObject to be used in different scenes Inheritance Object RandomSourceBaseSO UnityRandomSourceSO Inherited Members RandomSourceBaseSO.InitializeOnAwake RandomSourceBaseSO.ReseedOnAwake Namespace : RandomToolbox Assembly : cs.temp.dll.dll Syntax public class UnityRandomSourceSO : RandomSourceBaseSO Fields Instance UnityRandomSource instance Declaration public UnityRandomSource Instance Field Value Type Description UnityRandomSource Properties m_baseInstance Override to give the base class acces to the derived RandomSourceBase instance Declaration protected override RandomSourceBase m_baseInstance { get; } Property Value Type Description RandomSourceBase Overrides RandomSourceBaseSO.m_baseInstance"
  },
  "index.html": {
    "href": "index.html",
    "title": "Random Toolbox | Random Toolbox",
    "keywords": "Random Toolbox A bunch of tools to help you keep your game randomness under control. Features Manage multiples random number generator instance with differents seeds Protecte your gameplay from external tools making call to the UnityEngine.Random singleton Set probability of occurence when polling from a list with custom drawers Tests Installation Install via git url by adding this entry in your manifest.json \"Random Toolbox\": \"https://github.com/lemoissonneur/RandomToolbox.git#upm\" some test"
  }
}