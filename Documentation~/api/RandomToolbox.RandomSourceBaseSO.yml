### YamlMime:ManagedReference
items:
- uid: RandomToolbox.RandomSourceBaseSO
  commentId: T:RandomToolbox.RandomSourceBaseSO
  id: RandomSourceBaseSO
  parent: RandomToolbox
  children:
  - RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  - RandomToolbox.RandomSourceBaseSO.Instance
  - RandomToolbox.RandomSourceBaseSO.m_baseInstance
  - RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  langs:
  - csharp
  - vb
  name: RandomSourceBaseSO
  nameWithType: RandomSourceBaseSO
  fullName: RandomToolbox.RandomSourceBaseSO
  type: Class
  source:
    id: RandomSourceBaseSO
    path: ''
    startLine: 985
  assemblies:
  - cs.temp.dll
  namespace: RandomToolbox
  summary: "\nBase class for RandomSource contained in ScriptableObjects\n"
  example: []
  syntax:
    content: 'public abstract class RandomSourceBaseSO : ScriptableObject'
    content.vb: >-
      Public MustInherit Class RandomSourceBaseSO
          Inherits ScriptableObject
  inheritance:
  - System.Object
  derivedClasses:
  - RandomToolbox.SystemRandomSourceSO
  - RandomToolbox.UnityRandomSourceSO
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: RandomToolbox.RandomSourceBaseSO.Instance
  commentId: P:RandomToolbox.RandomSourceBaseSO.Instance
  id: Instance
  parent: RandomToolbox.RandomSourceBaseSO
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: RandomSourceBaseSO.Instance
  fullName: RandomToolbox.RandomSourceBaseSO.Instance
  type: Property
  source:
    id: Instance
    path: ''
    startLine: 990
  assemblies:
  - cs.temp.dll
  namespace: RandomToolbox
  summary: "\nRandomSource instance contained in this ScriptableObject\n"
  example: []
  syntax:
    content: public RandomSourceBase Instance { get; }
    parameters: []
    return:
      type: RandomToolbox.RandomSourceBase
    content.vb: Public ReadOnly Property Instance As RandomSourceBase
  overload: RandomToolbox.RandomSourceBaseSO.Instance*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RandomToolbox.RandomSourceBaseSO.m_baseInstance
  commentId: P:RandomToolbox.RandomSourceBaseSO.m_baseInstance
  id: m_baseInstance
  parent: RandomToolbox.RandomSourceBaseSO
  langs:
  - csharp
  - vb
  name: m_baseInstance
  nameWithType: RandomSourceBaseSO.m_baseInstance
  fullName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
  type: Property
  source:
    id: m_baseInstance
    path: ''
    startLine: 995
  assemblies:
  - cs.temp.dll
  namespace: RandomToolbox
  summary: "\nOverride in derived class to allow the base class acces to the RandomSource instance\n"
  example: []
  syntax:
    content: protected abstract RandomSourceBase m_baseInstance { get; }
    parameters: []
    return:
      type: RandomToolbox.RandomSourceBase
    content.vb: Protected MustOverride ReadOnly Property m_baseInstance As RandomSourceBase
  overload: RandomToolbox.RandomSourceBaseSO.m_baseInstance*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  commentId: P:RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  id: InitializeOnAwake
  parent: RandomToolbox.RandomSourceBaseSO
  langs:
  - csharp
  - vb
  name: InitializeOnAwake
  nameWithType: RandomSourceBaseSO.InitializeOnAwake
  fullName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  type: Property
  source:
    id: InitializeOnAwake
    path: ''
    startLine: 1000
  assemblies:
  - cs.temp.dll
  namespace: RandomToolbox
  summary: "\nIf True, Start() will be called when ScriptableObnject is Awake\n"
  example: []
  syntax:
    content: public bool InitializeOnAwake { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property InitializeOnAwake As Boolean
  overload: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  commentId: P:RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  id: ReseedOnAwake
  parent: RandomToolbox.RandomSourceBaseSO
  langs:
  - csharp
  - vb
  name: ReseedOnAwake
  nameWithType: RandomSourceBaseSO.ReseedOnAwake
  fullName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  type: Property
  source:
    id: ReseedOnAwake
    path: ''
    startLine: 1008
  assemblies:
  - cs.temp.dll
  namespace: RandomToolbox
  summary: "\nIf True, Reseed() will be called when ScriptableObnject is Awake.\nSince a reseed force a re-init if this field is true, it force &apos;InitializeOnAwake&apos; to true\n"
  example: []
  syntax:
    content: public bool ReseedOnAwake { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ReseedOnAwake As Boolean
  overload: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: RandomToolbox
  commentId: N:RandomToolbox
  name: RandomToolbox
  nameWithType: RandomToolbox
  fullName: RandomToolbox
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RandomToolbox.RandomSourceBaseSO.Instance*
  commentId: Overload:RandomToolbox.RandomSourceBaseSO.Instance
  name: Instance
  nameWithType: RandomSourceBaseSO.Instance
  fullName: RandomToolbox.RandomSourceBaseSO.Instance
- uid: RandomToolbox.RandomSourceBase
  commentId: T:RandomToolbox.RandomSourceBase
  parent: RandomToolbox
  name: RandomSourceBase
  nameWithType: RandomSourceBase
  fullName: RandomToolbox.RandomSourceBase
- uid: RandomToolbox.RandomSourceBaseSO.m_baseInstance*
  commentId: Overload:RandomToolbox.RandomSourceBaseSO.m_baseInstance
  name: m_baseInstance
  nameWithType: RandomSourceBaseSO.m_baseInstance
  fullName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
- uid: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*
  commentId: Overload:RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  name: InitializeOnAwake
  nameWithType: RandomSourceBaseSO.InitializeOnAwake
  fullName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*
  commentId: Overload:RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  name: ReseedOnAwake
  nameWithType: RandomSourceBaseSO.ReseedOnAwake
  fullName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
