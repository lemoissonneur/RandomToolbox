id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: RandomToolbox
  commentId: N:RandomToolbox
  language: CSharp
  name:
    CSharp: RandomToolbox
    VB: RandomToolbox
  nameWithType:
    CSharp: RandomToolbox
    VB: RandomToolbox
  qualifiedName:
    CSharp: RandomToolbox
    VB: RandomToolbox
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: RandomToolbox.PartitionDrawer
    commentId: T:RandomToolbox.PartitionDrawer
    language: CSharp
    name:
      CSharp: PartitionDrawer
      VB: PartitionDrawer
    nameWithType:
      CSharp: PartitionDrawer
      VB: PartitionDrawer
    qualifiedName:
      CSharp: RandomToolbox.PartitionDrawer
      VB: RandomToolbox.PartitionDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: PartitionDrawer
      path: ''
      startLine: 11
    summary: "\nProperty drawer for both void and generic partition\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PartitionDrawer : PropertyDrawer'
        VB: >-
          Public Class PartitionDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.PartitionDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:RandomToolbox.PartitionDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: PartitionDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: PartitionDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: RandomToolbox.PartitionDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: RandomToolbox.PartitionDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 35
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
        return:
          type: System.Single
      overload: RandomToolbox.PartitionDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: RandomToolbox.PartitionDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:RandomToolbox.PartitionDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: PartitionDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: PartitionDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: RandomToolbox.PartitionDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: RandomToolbox.PartitionDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: OnGUI
        path: ''
        startLine: 53
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Global.Rect
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
      overload: RandomToolbox.PartitionDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: RandomToolbox.PartitionElementDrawer
    commentId: T:RandomToolbox.PartitionElementDrawer
    language: CSharp
    name:
      CSharp: PartitionElementDrawer
      VB: PartitionElementDrawer
    nameWithType:
      CSharp: PartitionElementDrawer
      VB: PartitionElementDrawer
    qualifiedName:
      CSharp: RandomToolbox.PartitionElementDrawer
      VB: RandomToolbox.PartitionElementDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: PartitionElementDrawer
      path: ''
      startLine: 335
    summary: "\ndrawer for elements in the list of a partition\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PartitionElementDrawer : PropertyDrawer'
        VB: >-
          Public Class PartitionElementDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.PartitionElementDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:RandomToolbox.PartitionElementDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: PartitionElementDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: PartitionElementDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: RandomToolbox.PartitionElementDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: RandomToolbox.PartitionElementDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 396
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
        return:
          type: System.Single
      overload: RandomToolbox.PartitionElementDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: RandomToolbox.PartitionElementDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:RandomToolbox.PartitionElementDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: PartitionElementDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: PartitionElementDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: RandomToolbox.PartitionElementDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: RandomToolbox.PartitionElementDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: OnGUI
        path: ''
        startLine: 420
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Global.Rect
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
      overload: RandomToolbox.PartitionElementDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: RandomToolbox.PartitionElementDrawer.GetIndexFromPath(System.String)
      commentId: M:RandomToolbox.PartitionElementDrawer.GetIndexFromPath(System.String)
      language: CSharp
      name:
        CSharp: GetIndexFromPath(String)
        VB: GetIndexFromPath(String)
      nameWithType:
        CSharp: PartitionElementDrawer.GetIndexFromPath(String)
        VB: PartitionElementDrawer.GetIndexFromPath(String)
      qualifiedName:
        CSharp: RandomToolbox.PartitionElementDrawer.GetIndexFromPath(System.String)
        VB: RandomToolbox.PartitionElementDrawer.GetIndexFromPath(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetIndexFromPath
        path: ''
        startLine: 447
      summary: "\nGet the index of a serialized property in a serialized array\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetIndexFromPath(string path)
          VB: Public Shared Function GetIndexFromPath(path As String) As Integer
        parameters:
        - id: path
          type: System.String
          description: SerializedProperty.propertyPath
        return:
          type: System.Int32
          description: index or -1 if not found
      overload: RandomToolbox.PartitionElementDrawer.GetIndexFromPath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: RandomToolbox.PartitionBase
    commentId: T:RandomToolbox.PartitionBase
    language: CSharp
    name:
      CSharp: PartitionBase
      VB: PartitionBase
    nameWithType:
      CSharp: PartitionBase
      VB: PartitionBase
    qualifiedName:
      CSharp: RandomToolbox.PartitionBase
      VB: RandomToolbox.PartitionBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: PartitionBase
      path: ''
      startLine: 556
    summary: "\nThe base class is used for PropertyDrawer declaration and shared methods between the 2 derived class\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class PartitionBase
        VB: >-
          <Serializable>

          Public MustInherit Class PartitionBase
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: RandomToolbox.PartitionBase._elements
      commentId: P:RandomToolbox.PartitionBase._elements
      language: CSharp
      name:
        CSharp: _elements
        VB: _elements
      nameWithType:
        CSharp: PartitionBase._elements
        VB: PartitionBase._elements
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase._elements
        VB: RandomToolbox.PartitionBase._elements
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: _elements
        path: ''
        startLine: 579
      summary: "\noverriden in derived class to give this class access to partition elements\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract IReadOnlyList<PartitionBase.ElementBase> _elements { get; }
          VB: Protected MustOverride ReadOnly Property _elements As IReadOnlyList(Of PartitionBase.ElementBase)
        parameters: []
        return:
          type: System.Collections.Generic.IReadOnlyList{RandomToolbox.PartitionBase.ElementBase}
      overload: RandomToolbox.PartitionBase._elements*
      modifiers:
        CSharp:
        - protected
        - abstract
        - get
        VB:
        - Protected
        - MustOverride
        - ReadOnly
    - id: RandomToolbox.PartitionBase.IsCorrect
      commentId: P:RandomToolbox.PartitionBase.IsCorrect
      language: CSharp
      name:
        CSharp: IsCorrect
        VB: IsCorrect
      nameWithType:
        CSharp: PartitionBase.IsCorrect
        VB: PartitionBase.IsCorrect
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.IsCorrect
        VB: RandomToolbox.PartitionBase.IsCorrect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: IsCorrect
        path: ''
        startLine: 584
      summary: "\nTrue if the sum of all elements value is equal to 1.0\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsCorrect { get; }
          VB: Public ReadOnly Property IsCorrect As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: RandomToolbox.PartitionBase.IsCorrect*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.PartitionBase.GetIndex(System.Single)
      commentId: M:RandomToolbox.PartitionBase.GetIndex(System.Single)
      language: CSharp
      name:
        CSharp: GetIndex(Single)
        VB: GetIndex(Single)
      nameWithType:
        CSharp: PartitionBase.GetIndex(Single)
        VB: PartitionBase.GetIndex(Single)
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.GetIndex(System.Single)
        VB: RandomToolbox.PartitionBase.GetIndex(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetIndex
        path: ''
        startLine: 591
      summary: "\nReturn the index of elements at the given value in the partition range\n"
      example: []
      syntax:
        content:
          CSharp: public int GetIndex(float value)
          VB: Public Function GetIndex(value As Single) As Integer
        parameters:
        - id: value
          type: System.Single
          description: value in the 0-1 range
        return:
          type: System.Int32
          description: Return 0 if given value is lower than 0, last index of elements list if value is more than 1, or -1 if list is empty
      overload: RandomToolbox.PartitionBase.GetIndex*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
      commentId: M:RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
      language: CSharp
      name:
        CSharp: SetValues(Single[], PartitionBase.CorrectionRule)
        VB: SetValues(Single(), PartitionBase.CorrectionRule)
      nameWithType:
        CSharp: PartitionBase.SetValues(Single[], PartitionBase.CorrectionRule)
        VB: PartitionBase.SetValues(Single(), PartitionBase.CorrectionRule)
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.SetValues(System.Single[], RandomToolbox.PartitionBase.CorrectionRule)
        VB: RandomToolbox.PartitionBase.SetValues(System.Single(), RandomToolbox.PartitionBase.CorrectionRule)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SetValues
        path: ''
        startLine: 616
      summary: "\nSet the values for all elements in the partitions.\nIf the number of given value is lower than the current number of elements, the remaining elements value will be set to zero.\nIf the number of given value is higher than the current number of elements, the remaining given value will be ignored.\nIf the sum of values is not equal to 1.0, the partition will be corrected using the given correction rule (or the default one)\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void SetValues(float[] values, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll)
          VB: Public Overridable Sub SetValues(values As Single(), rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll)
        parameters:
        - id: values
          type: System.Single[]
          description: An array of float value that sum up to 1.0
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: The correction rule to use if the sum is not 1.0
      overload: RandomToolbox.PartitionBase.SetValues*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
      commentId: M:RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Single, PartitionBase.CorrectionRule)
        VB: SetValue(Int32, Single, PartitionBase.CorrectionRule)
      nameWithType:
        CSharp: PartitionBase.SetValue(Int32, Single, PartitionBase.CorrectionRule)
        VB: PartitionBase.SetValue(Int32, Single, PartitionBase.CorrectionRule)
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.SetValue(System.Int32, System.Single, RandomToolbox.PartitionBase.CorrectionRule)
        VB: RandomToolbox.PartitionBase.SetValue(System.Int32, System.Single, RandomToolbox.PartitionBase.CorrectionRule)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SetValue
        path: ''
        startLine: 635
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void SetValue(int index, float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll)
          VB: Public Sub SetValue(index As Integer, value As Single, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll)
        parameters:
        - id: index
          type: System.Int32
          description: ''
        - id: value
          type: System.Single
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
      overload: RandomToolbox.PartitionBase.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
      commentId: M:RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single)
        VB: CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single)
      nameWithType:
        CSharp: PartitionBase.CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single)
        VB: PartitionBase.CorrectPartition(PartitionBase.CorrectionRule, Int32, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule, System.Int32, System.Single, System.Single)
        VB: RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule, System.Int32, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: CorrectPartition
        path: ''
        startLine: 649
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void CorrectPartition(PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, int lastEditedValueIndex = 0, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub CorrectPartition(rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, lastEditedValueIndex As Integer = 0, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: lastEditedValueIndex
          type: System.Int32
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.PartitionBase.CorrectPartition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
      commentId: M:RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
      language: CSharp
      name:
        CSharp: DefaultPartitionCorrection(Single[])
        VB: DefaultPartitionCorrection(Single())
      nameWithType:
        CSharp: PartitionBase.DefaultPartitionCorrection(Single[])
        VB: PartitionBase.DefaultPartitionCorrection(Single())
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
        VB: RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: DefaultPartitionCorrection
        path: ''
        startLine: 685
      summary: "\nCheck a partition, and apply Default correction\n"
      example: []
      syntax:
        content:
          CSharp: public static void DefaultPartitionCorrection(float[] values)
          VB: Public Shared Sub DefaultPartitionCorrection(values As Single())
        parameters:
        - id: values
          type: System.Single[]
          description: an array of values
      overload: RandomToolbox.PartitionBase.DefaultPartitionCorrection*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
      commentId: M:RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CorrectPartition(Single[], PartitionBase.CorrectionRule, Int32, Single, Single)
        VB: CorrectPartition(Single(), PartitionBase.CorrectionRule, Int32, Single, Single)
      nameWithType:
        CSharp: PartitionBase.CorrectPartition(Single[], PartitionBase.CorrectionRule, Int32, Single, Single)
        VB: PartitionBase.CorrectPartition(Single(), PartitionBase.CorrectionRule, Int32, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectPartition(System.Single[], RandomToolbox.PartitionBase.CorrectionRule, System.Int32, System.Single, System.Single)
        VB: RandomToolbox.PartitionBase.CorrectPartition(System.Single(), RandomToolbox.PartitionBase.CorrectionRule, System.Int32, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: CorrectPartition
        path: ''
        startLine: 711
      summary: "\nCorrect a partition if the sum of value is not equal to 1.0\n"
      example: []
      syntax:
        content:
          CSharp: public static void CorrectPartition(float[] values, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, int lastEditedValueIndex = 0, float minValue = 0F, float maxValue = 1F)
          VB: Public Shared Sub CorrectPartition(values As Single(), rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, lastEditedValueIndex As Integer = 0, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: values
          type: System.Single[]
          description: values of the partition
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: the rule to use when editing values <xref href="RandomToolbox.PartitionBase.CorrectionRule" data-throw-if-not-resolved="false"></xref>
        - id: lastEditedValueIndex
          type: System.Int32
          description: specify the last edited value if you don&apos;t want it to be changed
        - id: minValue
          type: System.Single
          description: specify a mininum to use when editing partition values (can&apos;t be more than 1/n)
        - id: maxValue
          type: System.Single
          description: specify a maximum to use when editing partition values (can&apos;t be less than 1/n)
      overload: RandomToolbox.PartitionBase.CorrectPartition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        RandomToolbox.PartitionBase.CorrectionRule: 
  - id: RandomToolbox.PartitionBase.ElementBase
    commentId: T:RandomToolbox.PartitionBase.ElementBase
    language: CSharp
    name:
      CSharp: PartitionBase.ElementBase
      VB: PartitionBase.ElementBase
    nameWithType:
      CSharp: PartitionBase.ElementBase
      VB: PartitionBase.ElementBase
    qualifiedName:
      CSharp: RandomToolbox.PartitionBase.ElementBase
      VB: RandomToolbox.PartitionBase.ElementBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: ElementBase
      path: ''
      startLine: 562
    summary: "\nBase class for PropertyDrawer\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class ElementBase
        VB: >-
          <Serializable>

          Public MustInherit Class ElementBase
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: RandomToolbox.PartitionBase.ElementBase.Color
      commentId: F:RandomToolbox.PartitionBase.ElementBase.Color
      language: CSharp
      name:
        CSharp: Color
        VB: Color
      nameWithType:
        CSharp: PartitionBase.ElementBase.Color
        VB: PartitionBase.ElementBase.Color
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.ElementBase.Color
        VB: RandomToolbox.PartitionBase.ElementBase.Color
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Color
        path: ''
        startLine: 568
      summary: "\nColor of the part in inspector\n"
      example: []
      syntax:
        content:
          CSharp: public Color Color
          VB: Public Color As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionBase.ElementBase.Value
      commentId: F:RandomToolbox.PartitionBase.ElementBase.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: PartitionBase.ElementBase.Value
        VB: PartitionBase.ElementBase.Value
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.ElementBase.Value
        VB: RandomToolbox.PartitionBase.ElementBase.Value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Value
        path: ''
        startLine: 573
      summary: "\nAllocated amount\n"
      example: []
      syntax:
        content:
          CSharp: public float Value
          VB: Public Value As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.PartitionBase.CorrectionRule
    commentId: T:RandomToolbox.PartitionBase.CorrectionRule
    language: CSharp
    name:
      CSharp: PartitionBase.CorrectionRule
      VB: PartitionBase.CorrectionRule
    nameWithType:
      CSharp: PartitionBase.CorrectionRule
      VB: PartitionBase.CorrectionRule
    qualifiedName:
      CSharp: RandomToolbox.PartitionBase.CorrectionRule
      VB: RandomToolbox.PartitionBase.CorrectionRule
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: CorrectionRule
      path: ''
      startLine: 670
    summary: "\n\n"
    example: []
    syntax:
      content:
        CSharp: public enum CorrectionRule
        VB: Public Enum CorrectionRule
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: RandomToolbox.PartitionBase.CorrectionRule.AdjustAll
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.AdjustAll
      language: CSharp
      name:
        CSharp: AdjustAll
        VB: AdjustAll
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.AdjustAll
        VB: PartitionBase.CorrectionRule.AdjustAll
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.AdjustAll
        VB: RandomToolbox.PartitionBase.CorrectionRule.AdjustAll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AdjustAll
        path: ''
        startLine: 672
      syntax:
        content:
          CSharp: AdjustAll = 0
          VB: AdjustAll = 0
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftAndRight
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftAndRight
      language: CSharp
      name:
        CSharp: AdjustLeftAndRight
        VB: AdjustLeftAndRight
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.AdjustLeftAndRight
        VB: PartitionBase.CorrectionRule.AdjustLeftAndRight
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftAndRight
        VB: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftAndRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AdjustLeftAndRight
        path: ''
        startLine: 673
      syntax:
        content:
          CSharp: AdjustLeftAndRight = 1
          VB: AdjustLeftAndRight = 1
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftOnly
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftOnly
      language: CSharp
      name:
        CSharp: AdjustLeftOnly
        VB: AdjustLeftOnly
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.AdjustLeftOnly
        VB: PartitionBase.CorrectionRule.AdjustLeftOnly
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftOnly
        VB: RandomToolbox.PartitionBase.CorrectionRule.AdjustLeftOnly
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AdjustLeftOnly
        path: ''
        startLine: 674
      syntax:
        content:
          CSharp: AdjustLeftOnly = 2
          VB: AdjustLeftOnly = 2
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.PartitionBase.CorrectionRule.AdjustRightOnly
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.AdjustRightOnly
      language: CSharp
      name:
        CSharp: AdjustRightOnly
        VB: AdjustRightOnly
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.AdjustRightOnly
        VB: PartitionBase.CorrectionRule.AdjustRightOnly
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.AdjustRightOnly
        VB: RandomToolbox.PartitionBase.CorrectionRule.AdjustRightOnly
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AdjustRightOnly
        path: ''
        startLine: 675
      syntax:
        content:
          CSharp: AdjustRightOnly = 3
          VB: AdjustRightOnly = 3
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.PartitionBase.CorrectionRule.None
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.None
        VB: PartitionBase.CorrectionRule.None
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.None
        VB: RandomToolbox.PartitionBase.CorrectionRule.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: None
        path: ''
        startLine: 676
      syntax:
        content:
          CSharp: None = 5
          VB: None = 5
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.PartitionBase.CorrectionRule.Default
      commentId: F:RandomToolbox.PartitionBase.CorrectionRule.Default
      language: CSharp
      name:
        CSharp: Default
        VB: Default
      nameWithType:
        CSharp: PartitionBase.CorrectionRule.Default
        VB: PartitionBase.CorrectionRule.Default
      qualifiedName:
        CSharp: RandomToolbox.PartitionBase.CorrectionRule.Default
        VB: RandomToolbox.PartitionBase.CorrectionRule.Default
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Default
        path: ''
        startLine: 678
      syntax:
        content:
          CSharp: Default = 0
          VB: Default = 0
        return:
          type: RandomToolbox.PartitionBase.CorrectionRule
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: RandomToolbox.Partition
    commentId: T:RandomToolbox.Partition
    language: CSharp
    name:
      CSharp: Partition
      VB: Partition
    nameWithType:
      CSharp: Partition
      VB: Partition
    qualifiedName:
      CSharp: RandomToolbox.Partition
      VB: RandomToolbox.Partition
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: Partition
      path: ''
      startLine: 776
    summary: "\n\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Partition : PartitionBase
        VB: >-
          <Serializable>

          Public Class Partition

              Inherits PartitionBase
    inheritance:
    - System.Object
    - RandomToolbox.PartitionBase
    inheritedMembers:
    - RandomToolbox.PartitionBase.IsCorrect
    - RandomToolbox.PartitionBase.GetIndex(System.Single)
    - RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
    - RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
    - RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
    - RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
    - RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.Partition._elements
      commentId: P:RandomToolbox.Partition._elements
      language: CSharp
      name:
        CSharp: _elements
        VB: _elements
      nameWithType:
        CSharp: Partition._elements
        VB: Partition._elements
      qualifiedName:
        CSharp: RandomToolbox.Partition._elements
        VB: RandomToolbox.Partition._elements
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: _elements
        path: ''
        startLine: 781
      syntax:
        content:
          CSharp: protected override IReadOnlyList<PartitionBase.ElementBase> _elements { get; }
          VB: Protected Overrides ReadOnly Property _elements As IReadOnlyList(Of PartitionBase.ElementBase)
        parameters: []
        return:
          type: System.Collections.Generic.IReadOnlyList{RandomToolbox.PartitionBase.ElementBase}
      overload: RandomToolbox.Partition._elements*
      overridden: RandomToolbox.PartitionBase._elements
      modifiers:
        CSharp:
        - protected
        - override
        - get
        VB:
        - Protected
        - Overrides
        - ReadOnly
    - id: RandomToolbox.Partition.Elements
      commentId: F:RandomToolbox.Partition.Elements
      language: CSharp
      name:
        CSharp: Elements
        VB: Elements
      nameWithType:
        CSharp: Partition.Elements
        VB: Partition.Elements
      qualifiedName:
        CSharp: RandomToolbox.Partition.Elements
        VB: RandomToolbox.Partition.Elements
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Elements
        path: ''
        startLine: 786
      summary: "\nList of Elements in the partition\n"
      example: []
      syntax:
        content:
          CSharp: public List<Partition.Element> Elements
          VB: Public Elements As List(Of Partition.Element)
        return:
          type: System.Collections.Generic.List{RandomToolbox.Partition.Element}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition.GetElement(System.Single)
      commentId: M:RandomToolbox.Partition.GetElement(System.Single)
      language: CSharp
      name:
        CSharp: GetElement(Single)
        VB: GetElement(Single)
      nameWithType:
        CSharp: Partition.GetElement(Single)
        VB: Partition.GetElement(Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition.GetElement(System.Single)
        VB: RandomToolbox.Partition.GetElement(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetElement
        path: ''
        startLine: 793
      summary: "\nShorthand for Elements[GetIndex(value)]\n"
      example: []
      syntax:
        content:
          CSharp: public Partition.Element GetElement(float value)
          VB: Public Function GetElement(value As Single) As Partition.Element
        parameters:
        - id: value
          type: System.Single
          description: value in the 0-1 range
        return:
          type: RandomToolbox.Partition.Element
          description: null if no element found
      overload: RandomToolbox.Partition.GetElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition.AddElement(RandomToolbox.Partition.Element,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition.AddElement(RandomToolbox.Partition.Element,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: AddElement(Partition.Element, PartitionBase.CorrectionRule, Single, Single)
        VB: AddElement(Partition.Element, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition.AddElement(Partition.Element, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition.AddElement(Partition.Element, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition.AddElement(RandomToolbox.Partition.Element, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition.AddElement(RandomToolbox.Partition.Element, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AddElement
        path: ''
        startLine: 807
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void AddElement(Partition.Element element, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub AddElement(element As Partition.Element, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: element
          type: RandomToolbox.Partition.Element
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition.AddElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition.AddElement(System.Single,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition.AddElement(System.Single,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
        VB: AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition.AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition.AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition.AddElement(System.Single, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition.AddElement(System.Single, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AddElement
        path: ''
        startLine: 821
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void AddElement(float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub AddElement(value As Single, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: value
          type: System.Single
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition.AddElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition.RemoveElementAt(System.Int32,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition.RemoveElementAt(System.Int32,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
        VB: RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition.RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition.RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition.RemoveElementAt(System.Int32, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition.RemoveElementAt(System.Int32, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: RemoveElementAt
        path: ''
        startLine: 835
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveElementAt(int index, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub RemoveElementAt(index As Integer, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: index
          type: System.Int32
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition.RemoveElementAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.Partition.Element
    commentId: T:RandomToolbox.Partition.Element
    language: CSharp
    name:
      CSharp: Partition.Element
      VB: Partition.Element
    nameWithType:
      CSharp: Partition.Element
      VB: Partition.Element
    qualifiedName:
      CSharp: RandomToolbox.Partition.Element
      VB: RandomToolbox.Partition.Element
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: Element
      path: ''
      startLine: 779
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Element : PartitionBase.ElementBase
        VB: >-
          <Serializable>

          Public Class Element

              Inherits PartitionBase.ElementBase
    inheritance:
    - System.Object
    - RandomToolbox.PartitionBase.ElementBase
    inheritedMembers:
    - RandomToolbox.PartitionBase.ElementBase.Color
    - RandomToolbox.PartitionBase.ElementBase.Value
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: RandomToolbox.Partition`1
    commentId: T:RandomToolbox.Partition`1
    language: CSharp
    name:
      CSharp: Partition<T>
      VB: Partition(Of T)
    nameWithType:
      CSharp: Partition<T>
      VB: Partition(Of T)
    qualifiedName:
      CSharp: RandomToolbox.Partition<T>
      VB: RandomToolbox.Partition(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: Partition
      path: ''
      startLine: 851
    summary: "\n\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Partition<T> : PartitionBase
        VB: >-
          <Serializable>

          Public Class Partition(Of T)

              Inherits PartitionBase
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    - RandomToolbox.PartitionBase
    inheritedMembers:
    - RandomToolbox.PartitionBase.IsCorrect
    - RandomToolbox.PartitionBase.GetIndex(System.Single)
    - RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
    - RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
    - RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
    - RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
    - RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.Partition`1._elements
      commentId: P:RandomToolbox.Partition`1._elements
      language: CSharp
      name:
        CSharp: _elements
        VB: _elements
      nameWithType:
        CSharp: Partition<T>._elements
        VB: Partition(Of T)._elements
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>._elements
        VB: RandomToolbox.Partition(Of T)._elements
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: _elements
        path: ''
        startLine: 863
      syntax:
        content:
          CSharp: protected override IReadOnlyList<PartitionBase.ElementBase> _elements { get; }
          VB: Protected Overrides ReadOnly Property _elements As IReadOnlyList(Of PartitionBase.ElementBase)
        parameters: []
        return:
          type: System.Collections.Generic.IReadOnlyList{RandomToolbox.PartitionBase.ElementBase}
      overload: RandomToolbox.Partition`1._elements*
      overridden: RandomToolbox.PartitionBase._elements
      modifiers:
        CSharp:
        - protected
        - override
        - get
        VB:
        - Protected
        - Overrides
        - ReadOnly
    - id: RandomToolbox.Partition`1.Elements
      commentId: F:RandomToolbox.Partition`1.Elements
      language: CSharp
      name:
        CSharp: Elements
        VB: Elements
      nameWithType:
        CSharp: Partition<T>.Elements
        VB: Partition(Of T).Elements
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.Elements
        VB: RandomToolbox.Partition(Of T).Elements
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Elements
        path: ''
        startLine: 868
      summary: "\nList of Elements in the partition\n"
      example: []
      syntax:
        content:
          CSharp: public List<Partition<T>.Element> Elements
          VB: Public Elements As List(Of Partition(Of T).Element)
        return:
          type: System.Collections.Generic.List{RandomToolbox.Partition`1.Element}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.GetElement(System.Single)
      commentId: M:RandomToolbox.Partition`1.GetElement(System.Single)
      language: CSharp
      name:
        CSharp: GetElement(Single)
        VB: GetElement(Single)
      nameWithType:
        CSharp: Partition<T>.GetElement(Single)
        VB: Partition(Of T).GetElement(Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.GetElement(System.Single)
        VB: RandomToolbox.Partition(Of T).GetElement(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetElement
        path: ''
        startLine: 875
      summary: "\nShorthand for Elements[GetIndex(value)]\n"
      example: []
      syntax:
        content:
          CSharp: public Partition<T>.Element GetElement(float value)
          VB: Public Function GetElement(value As Single) As Partition(Of T).Element
        parameters:
        - id: value
          type: System.Single
          description: value in the 0-1 range
        return:
          type: RandomToolbox.Partition`1.Element
          description: null if no element found
      overload: RandomToolbox.Partition`1.GetElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.GetObject(System.Single)
      commentId: M:RandomToolbox.Partition`1.GetObject(System.Single)
      language: CSharp
      name:
        CSharp: GetObject(Single)
        VB: GetObject(Single)
      nameWithType:
        CSharp: Partition<T>.GetObject(Single)
        VB: Partition(Of T).GetObject(Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.GetObject(System.Single)
        VB: RandomToolbox.Partition(Of T).GetObject(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetObject
        path: ''
        startLine: 887
      summary: "\nShorthand for Elements[GetIndex(value)].Object\n"
      example: []
      syntax:
        content:
          CSharp: public T GetObject(float value)
          VB: Public Function GetObject(value As Single) As T
        parameters:
        - id: value
          type: System.Single
          description: value in the 0-1 range
        return:
          type: '{T}'
          description: default if no element found
      overload: RandomToolbox.Partition`1.GetObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.GetObject(System.Single,`0@)
      commentId: M:RandomToolbox.Partition`1.GetObject(System.Single,`0@)
      language: CSharp
      name:
        CSharp: GetObject(Single, out T)
        VB: GetObject(Single, ByRef T)
      nameWithType:
        CSharp: Partition<T>.GetObject(Single, out T)
        VB: Partition(Of T).GetObject(Single, ByRef T)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.GetObject(System.Single, out T)
        VB: RandomToolbox.Partition(Of T).GetObject(System.Single, ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetObject
        path: ''
        startLine: 900
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetObject(float value, out T Object)
          VB: Public Function GetObject(value As Single, ByRef Object As T) As Boolean
        parameters:
        - id: value
          type: System.Single
          description: ''
        - id: Object
          type: '{T}'
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: RandomToolbox.Partition`1.GetObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.Contains(`0)
      commentId: M:RandomToolbox.Partition`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: Partition<T>.Contains(T)
        VB: Partition(Of T).Contains(T)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.Contains(T)
        VB: RandomToolbox.Partition(Of T).Contains(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Contains
        path: ''
        startLine: 920
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(T obj)
          VB: Public Function Contains(obj As T) As Boolean
        parameters:
        - id: obj
          type: '{T}'
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: RandomToolbox.Partition`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.AddElement(RandomToolbox.Partition{`0}.Element,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition`1.AddElement(RandomToolbox.Partition{`0}.Element,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: AddElement(Partition<T>.Element, PartitionBase.CorrectionRule, Single, Single)
        VB: AddElement(Partition(Of T).Element, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition<T>.AddElement(Partition<T>.Element, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition(Of T).AddElement(Partition(Of T).Element, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.AddElement(RandomToolbox.Partition<T>.Element, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition(Of T).AddElement(RandomToolbox.Partition(Of T).Element, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AddElement
        path: ''
        startLine: 935
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void AddElement(Partition<T>.Element element, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub AddElement(element As Partition(Of T).Element, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: element
          type: RandomToolbox.Partition`1.Element
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition`1.AddElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.AddElement(System.Single,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition`1.AddElement(System.Single,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
        VB: AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition<T>.AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition(Of T).AddElement(Single, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.AddElement(System.Single, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition(Of T).AddElement(System.Single, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: AddElement
        path: ''
        startLine: 949
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void AddElement(float value, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub AddElement(value As Single, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: value
          type: System.Single
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition`1.AddElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.Partition`1.RemoveElementAt(System.Int32,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      commentId: M:RandomToolbox.Partition`1.RemoveElementAt(System.Int32,RandomToolbox.PartitionBase.CorrectionRule,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
        VB: RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
      nameWithType:
        CSharp: Partition<T>.RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
        VB: Partition(Of T).RemoveElementAt(Int32, PartitionBase.CorrectionRule, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.RemoveElementAt(System.Int32, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
        VB: RandomToolbox.Partition(Of T).RemoveElementAt(System.Int32, RandomToolbox.PartitionBase.CorrectionRule, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: RemoveElementAt
        path: ''
        startLine: 963
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveElementAt(int index, PartitionBase.CorrectionRule rule = PartitionBase.CorrectionRule.AdjustAll, float minValue = 0F, float maxValue = 1F)
          VB: Public Sub RemoveElementAt(index As Integer, rule As PartitionBase.CorrectionRule = PartitionBase.CorrectionRule.AdjustAll, minValue As Single = 0F, maxValue As Single = 1F)
        parameters:
        - id: index
          type: System.Int32
          description: ''
        - id: rule
          type: RandomToolbox.PartitionBase.CorrectionRule
          description: ''
        - id: minValue
          type: System.Single
          description: ''
        - id: maxValue
          type: System.Single
          description: ''
      overload: RandomToolbox.Partition`1.RemoveElementAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.Partition`1.Element
    commentId: T:RandomToolbox.Partition`1.Element
    language: CSharp
    name:
      CSharp: Partition<T>.Element
      VB: Partition(Of T).Element
    nameWithType:
      CSharp: Partition<T>.Element
      VB: Partition(Of T).Element
    qualifiedName:
      CSharp: RandomToolbox.Partition<T>.Element
      VB: RandomToolbox.Partition(Of T).Element
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: Element
      path: ''
      startLine: 854
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Element : PartitionBase.ElementBase
        VB: >-
          <Serializable>

          Public Class Element

              Inherits PartitionBase.ElementBase
    inheritance:
    - System.Object
    - RandomToolbox.PartitionBase.ElementBase
    inheritedMembers:
    - RandomToolbox.PartitionBase.ElementBase.Color
    - RandomToolbox.PartitionBase.ElementBase.Value
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.Partition`1.Element.Object
      commentId: F:RandomToolbox.Partition`1.Element.Object
      language: CSharp
      name:
        CSharp: Object
        VB: Object
      nameWithType:
        CSharp: Partition<T>.Element.Object
        VB: Partition(Of T).Element.Object
      qualifiedName:
        CSharp: RandomToolbox.Partition<T>.Element.Object
        VB: RandomToolbox.Partition(Of T).Element.Object
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Object
        path: ''
        startLine: 860
      summary: "\nCorresponding data for the elements\n"
      example: []
      syntax:
        content:
          CSharp: public T Object
          VB: Public Object As T
        return:
          type: '{T}'
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.RandomSourceBaseSO
    commentId: T:RandomToolbox.RandomSourceBaseSO
    language: CSharp
    name:
      CSharp: RandomSourceBaseSO
      VB: RandomSourceBaseSO
    nameWithType:
      CSharp: RandomSourceBaseSO
      VB: RandomSourceBaseSO
    qualifiedName:
      CSharp: RandomToolbox.RandomSourceBaseSO
      VB: RandomToolbox.RandomSourceBaseSO
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: RandomSourceBaseSO
      path: ''
      startLine: 985
    summary: "\nBase class for RandomSource contained in ScriptableObjects\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class RandomSourceBaseSO : ScriptableObject'
        VB: >-
          Public MustInherit Class RandomSourceBaseSO

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: RandomToolbox.RandomSourceBaseSO.Instance
      commentId: P:RandomToolbox.RandomSourceBaseSO.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: RandomSourceBaseSO.Instance
        VB: RandomSourceBaseSO.Instance
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBaseSO.Instance
        VB: RandomToolbox.RandomSourceBaseSO.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Instance
        path: ''
        startLine: 990
      summary: "\nRandomSource instance contained in this ScriptableObject\n"
      example: []
      syntax:
        content:
          CSharp: public RandomSourceBase Instance { get; }
          VB: Public ReadOnly Property Instance As RandomSourceBase
        parameters: []
        return:
          type: RandomToolbox.RandomSourceBase
      overload: RandomToolbox.RandomSourceBaseSO.Instance*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      commentId: P:RandomToolbox.RandomSourceBaseSO.m_baseInstance
      language: CSharp
      name:
        CSharp: m_baseInstance
        VB: m_baseInstance
      nameWithType:
        CSharp: RandomSourceBaseSO.m_baseInstance
        VB: RandomSourceBaseSO.m_baseInstance
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBaseSO.m_baseInstance
        VB: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: m_baseInstance
        path: ''
        startLine: 995
      summary: "\nOverride in derived class to allow the base class acces to the RandomSource instance\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract RandomSourceBase m_baseInstance { get; }
          VB: Protected MustOverride ReadOnly Property m_baseInstance As RandomSourceBase
        parameters: []
        return:
          type: RandomToolbox.RandomSourceBase
      overload: RandomToolbox.RandomSourceBaseSO.m_baseInstance*
      modifiers:
        CSharp:
        - protected
        - abstract
        - get
        VB:
        - Protected
        - MustOverride
        - ReadOnly
    - id: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
      commentId: P:RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
      language: CSharp
      name:
        CSharp: InitializeOnAwake
        VB: InitializeOnAwake
      nameWithType:
        CSharp: RandomSourceBaseSO.InitializeOnAwake
        VB: RandomSourceBaseSO.InitializeOnAwake
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
        VB: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: InitializeOnAwake
        path: ''
        startLine: 1000
      summary: "\nIf True, Start() will be called when ScriptableObnject is Awake\n"
      example: []
      syntax:
        content:
          CSharp: public bool InitializeOnAwake { get; }
          VB: Public ReadOnly Property InitializeOnAwake As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
      commentId: P:RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
      language: CSharp
      name:
        CSharp: ReseedOnAwake
        VB: ReseedOnAwake
      nameWithType:
        CSharp: RandomSourceBaseSO.ReseedOnAwake
        VB: RandomSourceBaseSO.ReseedOnAwake
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
        VB: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ReseedOnAwake
        path: ''
        startLine: 1008
      summary: "\nIf True, Reseed() will be called when ScriptableObnject is Awake.\nSince a reseed force a re-init if this field is true, it force &apos;InitializeOnAwake&apos; to true\n"
      example: []
      syntax:
        content:
          CSharp: public bool ReseedOnAwake { get; }
          VB: Public ReadOnly Property ReseedOnAwake As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: RandomToolbox.RandomSourceBase
    commentId: T:RandomToolbox.RandomSourceBase
    language: CSharp
    name:
      CSharp: RandomSourceBase
      VB: RandomSourceBase
    nameWithType:
      CSharp: RandomSourceBase
      VB: RandomSourceBase
    qualifiedName:
      CSharp: RandomToolbox.RandomSourceBase
      VB: RandomToolbox.RandomSourceBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: RandomSourceBase
      path: ''
      startLine: 1031
    summary: "\nBase class for Seed System\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class RandomSourceBase
        VB: >-
          <Serializable>

          Public MustInherit Class RandomSourceBase
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: RandomToolbox.RandomSourceBase.m_seed
      commentId: F:RandomToolbox.RandomSourceBase.m_seed
      language: CSharp
      name:
        CSharp: m_seed
        VB: m_seed
      nameWithType:
        CSharp: RandomSourceBase.m_seed
        VB: RandomSourceBase.m_seed
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.m_seed
        VB: RandomToolbox.RandomSourceBase.m_seed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: m_seed
        path: ''
        startLine: 1037
      summary: "\nCurrent seed\n"
      example: []
      syntax:
        content:
          CSharp: protected int m_seed
          VB: Protected m_seed As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: RandomToolbox.RandomSourceBase.SeedGenerator
      commentId: F:RandomToolbox.RandomSourceBase.SeedGenerator
      language: CSharp
      name:
        CSharp: SeedGenerator
        VB: SeedGenerator
      nameWithType:
        CSharp: RandomSourceBase.SeedGenerator
        VB: RandomSourceBase.SeedGenerator
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.SeedGenerator
        VB: RandomToolbox.RandomSourceBase.SeedGenerator
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SeedGenerator
        path: ''
        startLine: 1042
      summary: "\nCurrent select seed generator to use for Reseed()\n"
      example: []
      syntax:
        content:
          CSharp: public SeedGenerators.Generator SeedGenerator
          VB: Public SeedGenerator As SeedGenerators.Generator
        return:
          type: RandomToolbox.SeedGenerators.Generator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourceBase.Seed
      commentId: P:RandomToolbox.RandomSourceBase.Seed
      language: CSharp
      name:
        CSharp: Seed
        VB: Seed
      nameWithType:
        CSharp: RandomSourceBase.Seed
        VB: RandomSourceBase.Seed
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Seed
        VB: RandomToolbox.RandomSourceBase.Seed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Seed
        path: ''
        startLine: 1047
      summary: "\nThe current seed used\n"
      example: []
      syntax:
        content:
          CSharp: public int Seed { get; }
          VB: Public ReadOnly Property Seed As Integer
        parameters: []
        return:
          type: System.Int32
      overload: RandomToolbox.RandomSourceBase.Seed*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.RandomSourceBase.Start
      commentId: M:RandomToolbox.RandomSourceBase.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: RandomSourceBase.Start()
        VB: RandomSourceBase.Start()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Start()
        VB: RandomToolbox.RandomSourceBase.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1052
      summary: "\nInitialize the Seed system with the current seed\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void Start()
          VB: Public MustOverride Sub Start
      overload: RandomToolbox.RandomSourceBase.Start*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: RandomToolbox.RandomSourceBase.Start(System.Int32)
      commentId: M:RandomToolbox.RandomSourceBase.Start(System.Int32)
      language: CSharp
      name:
        CSharp: Start(Int32)
        VB: Start(Int32)
      nameWithType:
        CSharp: RandomSourceBase.Start(Int32)
        VB: RandomSourceBase.Start(Int32)
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Start(System.Int32)
        VB: RandomToolbox.RandomSourceBase.Start(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1058
      summary: "\nInitialize the Seed system with the given new seed\n"
      example: []
      syntax:
        content:
          CSharp: public void Start(int newSeed)
          VB: Public Sub Start(newSeed As Integer)
        parameters:
        - id: newSeed
          type: System.Int32
          description: seed used to initialize the system
      overload: RandomToolbox.RandomSourceBase.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourceBase.Start(System.Boolean)
      commentId: M:RandomToolbox.RandomSourceBase.Start(System.Boolean)
      language: CSharp
      name:
        CSharp: Start(Boolean)
        VB: Start(Boolean)
      nameWithType:
        CSharp: RandomSourceBase.Start(Boolean)
        VB: RandomSourceBase.Start(Boolean)
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Start(System.Boolean)
        VB: RandomToolbox.RandomSourceBase.Start(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1068
      summary: "\nIf reseed is true, generate a new seed using the current SeedGenerator value and initialize random source\n"
      example: []
      syntax:
        content:
          CSharp: public void Start(bool reseed)
          VB: Public Sub Start(reseed As Boolean)
        parameters:
        - id: reseed
          type: System.Boolean
          description: ''
      overload: RandomToolbox.RandomSourceBase.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
      commentId: M:RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
      language: CSharp
      name:
        CSharp: Start(SeedGenerators.Generator)
        VB: Start(SeedGenerators.Generator)
      nameWithType:
        CSharp: RandomSourceBase.Start(SeedGenerators.Generator)
        VB: RandomSourceBase.Start(SeedGenerators.Generator)
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
        VB: RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1078
      summary: "\nInitialize the Seed system with a new seed from the given seed generator\n"
      example: []
      syntax:
        content:
          CSharp: public void Start(SeedGenerators.Generator seedGenerator)
          VB: Public Sub Start(seedGenerator As SeedGenerators.Generator)
        parameters:
        - id: seedGenerator
          type: RandomToolbox.SeedGenerators.Generator
          description: Generator to use to get a new seed
      overload: RandomToolbox.RandomSourceBase.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourceBase.Reseed
      commentId: M:RandomToolbox.RandomSourceBase.Reseed
      language: CSharp
      name:
        CSharp: Reseed()
        VB: Reseed()
      nameWithType:
        CSharp: RandomSourceBase.Reseed()
        VB: RandomSourceBase.Reseed()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourceBase.Reseed()
        VB: RandomToolbox.RandomSourceBase.Reseed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Reseed
        path: ''
        startLine: 1089
      summary: "\nGenerate a new seed using the current SeedGenerator value and initialize random source\nthis is a shorthand for &apos;Start(SeedGenerator.GetSeed());&apos;\n"
      example: []
      syntax:
        content:
          CSharp: public void Reseed()
          VB: Public Sub Reseed
      overload: RandomToolbox.RandomSourceBase.Reseed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.SeedGenerators
    commentId: T:RandomToolbox.SeedGenerators
    language: CSharp
    name:
      CSharp: SeedGenerators
      VB: SeedGenerators
    nameWithType:
      CSharp: SeedGenerators
      VB: SeedGenerators
    qualifiedName:
      CSharp: RandomToolbox.SeedGenerators
      VB: RandomToolbox.SeedGenerators
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: SeedGenerators
      path: ''
      startLine: 1106
    summary: "\nClass for seed generation\n"
    example: []
    syntax:
      content:
        CSharp: public static class SeedGenerators
        VB: Public Module SeedGenerators
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: RandomToolbox.SeedGenerators.GetSeed(RandomToolbox.SeedGenerators.Generator)
      commentId: M:RandomToolbox.SeedGenerators.GetSeed(RandomToolbox.SeedGenerators.Generator)
      language: CSharp
      name:
        CSharp: GetSeed(SeedGenerators.Generator)
        VB: GetSeed(SeedGenerators.Generator)
      nameWithType:
        CSharp: SeedGenerators.GetSeed(SeedGenerators.Generator)
        VB: SeedGenerators.GetSeed(SeedGenerators.Generator)
      qualifiedName:
        CSharp: RandomToolbox.SeedGenerators.GetSeed(RandomToolbox.SeedGenerators.Generator)
        VB: RandomToolbox.SeedGenerators.GetSeed(RandomToolbox.SeedGenerators.Generator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: GetSeed
        path: ''
        startLine: 1123
      summary: "\nGenerate seed from Generator enum value\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetSeed(this SeedGenerators.Generator value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetSeed(value As SeedGenerators.Generator) As Integer
        parameters:
        - id: value
          type: RandomToolbox.SeedGenerators.Generator
          description: SeedGenerators.Generator enum value
        return:
          type: System.Int32
          description: new generated seed
      overload: RandomToolbox.SeedGenerators.GetSeed*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed
      commentId: M:RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed
      language: CSharp
      name:
        CSharp: CurrentDateTimeBasedSeed()
        VB: CurrentDateTimeBasedSeed()
      nameWithType:
        CSharp: SeedGenerators.CurrentDateTimeBasedSeed()
        VB: SeedGenerators.CurrentDateTimeBasedSeed()
      qualifiedName:
        CSharp: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed()
        VB: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: CurrentDateTimeBasedSeed
        path: ''
        startLine: 1138
      summary: "\nGet a new seed based on current date and time\n"
      example: []
      syntax:
        content:
          CSharp: public static int CurrentDateTimeBasedSeed()
          VB: Public Shared Function CurrentDateTimeBasedSeed As Integer
        return:
          type: System.Int32
          description: Return the result of System.DateTime.Now.Ticks
      overload: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: RandomToolbox.SeedGenerators.SystemStartTimeSeed
      commentId: M:RandomToolbox.SeedGenerators.SystemStartTimeSeed
      language: CSharp
      name:
        CSharp: SystemStartTimeSeed()
        VB: SystemStartTimeSeed()
      nameWithType:
        CSharp: SeedGenerators.SystemStartTimeSeed()
        VB: SeedGenerators.SystemStartTimeSeed()
      qualifiedName:
        CSharp: RandomToolbox.SeedGenerators.SystemStartTimeSeed()
        VB: RandomToolbox.SeedGenerators.SystemStartTimeSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SystemStartTimeSeed
        path: ''
        startLine: 1144
      summary: "\nGet a new seed based on time elapsed since the machine we are running on started\n"
      example: []
      syntax:
        content:
          CSharp: public static int SystemStartTimeSeed()
          VB: Public Shared Function SystemStartTimeSeed As Integer
        return:
          type: System.Int32
          description: Return the result of System.Environment.TickCount
      overload: RandomToolbox.SeedGenerators.SystemStartTimeSeed*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: RandomToolbox.SeedGenerators.Generator
    commentId: T:RandomToolbox.SeedGenerators.Generator
    language: CSharp
    name:
      CSharp: SeedGenerators.Generator
      VB: SeedGenerators.Generator
    nameWithType:
      CSharp: SeedGenerators.Generator
      VB: SeedGenerators.Generator
    qualifiedName:
      CSharp: RandomToolbox.SeedGenerators.Generator
      VB: RandomToolbox.SeedGenerators.Generator
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: Generator
      path: ''
      startLine: 1111
    summary: "\nAllow to easily select a static seed generator in editor\n"
    example: []
    syntax:
      content:
        CSharp: public enum Generator
        VB: Public Enum Generator
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: RandomToolbox.SeedGenerators.Generator.CurrentDateTimeBasedSeed
      commentId: F:RandomToolbox.SeedGenerators.Generator.CurrentDateTimeBasedSeed
      language: CSharp
      name:
        CSharp: CurrentDateTimeBasedSeed
        VB: CurrentDateTimeBasedSeed
      nameWithType:
        CSharp: SeedGenerators.Generator.CurrentDateTimeBasedSeed
        VB: SeedGenerators.Generator.CurrentDateTimeBasedSeed
      qualifiedName:
        CSharp: RandomToolbox.SeedGenerators.Generator.CurrentDateTimeBasedSeed
        VB: RandomToolbox.SeedGenerators.Generator.CurrentDateTimeBasedSeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: CurrentDateTimeBasedSeed
        path: ''
        startLine: 1113
      syntax:
        content:
          CSharp: CurrentDateTimeBasedSeed = 0
          VB: CurrentDateTimeBasedSeed = 0
        return:
          type: RandomToolbox.SeedGenerators.Generator
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: RandomToolbox.SeedGenerators.Generator.SystemStartTimeSeed
      commentId: F:RandomToolbox.SeedGenerators.Generator.SystemStartTimeSeed
      language: CSharp
      name:
        CSharp: SystemStartTimeSeed
        VB: SystemStartTimeSeed
      nameWithType:
        CSharp: SeedGenerators.Generator.SystemStartTimeSeed
        VB: SeedGenerators.Generator.SystemStartTimeSeed
      qualifiedName:
        CSharp: RandomToolbox.SeedGenerators.Generator.SystemStartTimeSeed
        VB: RandomToolbox.SeedGenerators.Generator.SystemStartTimeSeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SystemStartTimeSeed
        path: ''
        startLine: 1114
      syntax:
        content:
          CSharp: SystemStartTimeSeed = 1
          VB: SystemStartTimeSeed = 1
        return:
          type: RandomToolbox.SeedGenerators.Generator
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: RandomToolbox.SystemRandomSourceSO
    commentId: T:RandomToolbox.SystemRandomSourceSO
    language: CSharp
    name:
      CSharp: SystemRandomSourceSO
      VB: SystemRandomSourceSO
    nameWithType:
      CSharp: SystemRandomSourceSO
      VB: SystemRandomSourceSO
    qualifiedName:
      CSharp: RandomToolbox.SystemRandomSourceSO
      VB: RandomToolbox.SystemRandomSourceSO
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: SystemRandomSourceSO
      path: ''
      startLine: 1168
    summary: "\nA SystemRandomSource instance contained in a ScriptableObject to be used\nin different scenes\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SystemRandomSourceSO : RandomSourceBaseSO'
        VB: >-
          Public Class SystemRandomSourceSO

              Inherits RandomSourceBaseSO
    inheritance:
    - System.Object
    - RandomToolbox.RandomSourceBaseSO
    inheritedMembers:
    - RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
    - RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.SystemRandomSourceSO.Instance
      commentId: F:RandomToolbox.SystemRandomSourceSO.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: SystemRandomSourceSO.Instance
        VB: SystemRandomSourceSO.Instance
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSourceSO.Instance
        VB: RandomToolbox.SystemRandomSourceSO.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Instance
        path: ''
        startLine: 1174
      summary: "\nSystemRandomSource instance\n"
      example: []
      syntax:
        content:
          CSharp: public SystemRandomSource Instance
          VB: Public Instance As SystemRandomSource
        return:
          type: RandomToolbox.SystemRandomSource
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSourceSO.m_baseInstance
      commentId: P:RandomToolbox.SystemRandomSourceSO.m_baseInstance
      language: CSharp
      name:
        CSharp: m_baseInstance
        VB: m_baseInstance
      nameWithType:
        CSharp: SystemRandomSourceSO.m_baseInstance
        VB: SystemRandomSourceSO.m_baseInstance
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSourceSO.m_baseInstance
        VB: RandomToolbox.SystemRandomSourceSO.m_baseInstance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: m_baseInstance
        path: ''
        startLine: 1179
      summary: "\nOverride to give the base class acces to the derived RandomSourceBase instance\n"
      example: []
      syntax:
        content:
          CSharp: protected override RandomSourceBase m_baseInstance { get; }
          VB: Protected Overrides ReadOnly Property m_baseInstance As RandomSourceBase
        parameters: []
        return:
          type: RandomToolbox.RandomSourceBase
      overload: RandomToolbox.SystemRandomSourceSO.m_baseInstance*
      overridden: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      modifiers:
        CSharp:
        - protected
        - override
        - get
        VB:
        - Protected
        - Overrides
        - ReadOnly
  - id: RandomToolbox.SystemRandomSource
    commentId: T:RandomToolbox.SystemRandomSource
    language: CSharp
    name:
      CSharp: SystemRandomSource
      VB: SystemRandomSource
    nameWithType:
      CSharp: SystemRandomSource
      VB: SystemRandomSource
    qualifiedName:
      CSharp: RandomToolbox.SystemRandomSource
      VB: RandomToolbox.SystemRandomSource
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: SystemRandomSource
      path: ''
      startLine: 1185
    summary: "\nSafe Random source based on System.Random\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class SystemRandomSource : RandomSourceBase
        VB: >-
          <Serializable>

          Public Class SystemRandomSource

              Inherits RandomSourceBase
    inheritance:
    - System.Object
    - RandomToolbox.RandomSourceBase
    inheritedMembers:
    - RandomToolbox.RandomSourceBase.m_seed
    - RandomToolbox.RandomSourceBase.SeedGenerator
    - RandomToolbox.RandomSourceBase.Seed
    - RandomToolbox.RandomSourceBase.Start(System.Int32)
    - RandomToolbox.RandomSourceBase.Start(System.Boolean)
    - RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
    - RandomToolbox.RandomSourceBase.Reseed
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.SystemRandomSource.#ctor
      commentId: M:RandomToolbox.SystemRandomSource.#ctor
      language: CSharp
      name:
        CSharp: SystemRandomSource()
        VB: SystemRandomSource()
      nameWithType:
        CSharp: SystemRandomSource.SystemRandomSource()
        VB: SystemRandomSource.SystemRandomSource()
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.SystemRandomSource()
        VB: RandomToolbox.SystemRandomSource.SystemRandomSource()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: .ctor
        path: ''
        startLine: 1196
      summary: "\nInstantiate a new SystemRandomSource but does not initialize it\n"
      example: []
      syntax:
        content:
          CSharp: public SystemRandomSource()
          VB: Public Sub New
      overload: RandomToolbox.SystemRandomSource.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.#ctor(System.Int32)
      commentId: M:RandomToolbox.SystemRandomSource.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: SystemRandomSource(Int32)
        VB: SystemRandomSource(Int32)
      nameWithType:
        CSharp: SystemRandomSource.SystemRandomSource(Int32)
        VB: SystemRandomSource.SystemRandomSource(Int32)
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.SystemRandomSource(System.Int32)
        VB: RandomToolbox.SystemRandomSource.SystemRandomSource(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: .ctor
        path: ''
        startLine: 1202
      summary: "\nInstantiate a new UnityRandomSource and Initialize with given seed.\n"
      example: []
      syntax:
        content:
          CSharp: public SystemRandomSource(int seed)
          VB: Public Sub New(seed As Integer)
        parameters:
        - id: seed
          type: System.Int32
          description: Seed to initialize the random generator
      overload: RandomToolbox.SystemRandomSource.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.Start
      commentId: M:RandomToolbox.SystemRandomSource.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: SystemRandomSource.Start()
        VB: SystemRandomSource.Start()
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Start()
        VB: RandomToolbox.SystemRandomSource.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1211
      summary: "\nInitialize the Seed system with the current seed\n"
      example: []
      syntax:
        content:
          CSharp: public override void Start()
          VB: Public Overrides Sub Start
      overload: RandomToolbox.SystemRandomSource.Start*
      overridden: RandomToolbox.RandomSourceBase.Start
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: RandomToolbox.SystemRandomSource.Next
      commentId: M:RandomToolbox.SystemRandomSource.Next
      language: CSharp
      name:
        CSharp: Next()
        VB: Next()
      nameWithType:
        CSharp: SystemRandomSource.Next()
        VB: SystemRandomSource.Next()
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Next()
        VB: RandomToolbox.SystemRandomSource.Next()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Next
        path: ''
        startLine: 1220
      summary: "\nsame as System.Random.Next()\n"
      example: []
      syntax:
        content:
          CSharp: public int Next()
          VB: Public Function Next As Integer
        return:
          type: System.Int32
          description: int
      overload: RandomToolbox.SystemRandomSource.Next*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.Next(System.Int32)
      commentId: M:RandomToolbox.SystemRandomSource.Next(System.Int32)
      language: CSharp
      name:
        CSharp: Next(Int32)
        VB: Next(Int32)
      nameWithType:
        CSharp: SystemRandomSource.Next(Int32)
        VB: SystemRandomSource.Next(Int32)
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Next(System.Int32)
        VB: RandomToolbox.SystemRandomSource.Next(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Next
        path: ''
        startLine: 1227
      summary: "\nsame as System.Random.Next(int maxValue)\n"
      example: []
      syntax:
        content:
          CSharp: public int Next(int maxValue)
          VB: Public Function Next(maxValue As Integer) As Integer
        parameters:
        - id: maxValue
          type: System.Int32
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: RandomToolbox.SystemRandomSource.Next*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.Next(System.Int32,System.Int32)
      commentId: M:RandomToolbox.SystemRandomSource.Next(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Next(Int32, Int32)
        VB: Next(Int32, Int32)
      nameWithType:
        CSharp: SystemRandomSource.Next(Int32, Int32)
        VB: SystemRandomSource.Next(Int32, Int32)
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Next(System.Int32, System.Int32)
        VB: RandomToolbox.SystemRandomSource.Next(System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Next
        path: ''
        startLine: 1235
      summary: "\nsame as System.Random.Next(int minValue, int maxValue)\n"
      example: []
      syntax:
        content:
          CSharp: public int Next(int minValue, int maxValue)
          VB: Public Function Next(minValue As Integer, maxValue As Integer) As Integer
        parameters:
        - id: minValue
          type: System.Int32
          description: ''
        - id: maxValue
          type: System.Int32
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: RandomToolbox.SystemRandomSource.Next*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.NextBytes(System.Byte[])
      commentId: M:RandomToolbox.SystemRandomSource.NextBytes(System.Byte[])
      language: CSharp
      name:
        CSharp: NextBytes(Byte[])
        VB: NextBytes(Byte())
      nameWithType:
        CSharp: SystemRandomSource.NextBytes(Byte[])
        VB: SystemRandomSource.NextBytes(Byte())
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.NextBytes(System.Byte[])
        VB: RandomToolbox.SystemRandomSource.NextBytes(System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: NextBytes
        path: ''
        startLine: 1241
      summary: "\nsame as System.Random.NextBytes(byte[] buffer)\n"
      example: []
      syntax:
        content:
          CSharp: public void NextBytes(byte[] buffer)
          VB: Public Sub NextBytes(buffer As Byte())
        parameters:
        - id: buffer
          type: System.Byte[]
          description: ''
      overload: RandomToolbox.SystemRandomSource.NextBytes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.NextDouble
      commentId: M:RandomToolbox.SystemRandomSource.NextDouble
      language: CSharp
      name:
        CSharp: NextDouble()
        VB: NextDouble()
      nameWithType:
        CSharp: SystemRandomSource.NextDouble()
        VB: SystemRandomSource.NextDouble()
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.NextDouble()
        VB: RandomToolbox.SystemRandomSource.NextDouble()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: NextDouble
        path: ''
        startLine: 1247
      summary: "\nsame as System.Random.NextDouble()\n"
      example: []
      syntax:
        content:
          CSharp: public double NextDouble()
          VB: Public Function NextDouble As Double
        return:
          type: System.Double
          description: ''
      overload: RandomToolbox.SystemRandomSource.NextDouble*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.Save
      commentId: M:RandomToolbox.SystemRandomSource.Save
      language: CSharp
      name:
        CSharp: Save()
        VB: Save()
      nameWithType:
        CSharp: SystemRandomSource.Save()
        VB: SystemRandomSource.Save()
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Save()
        VB: RandomToolbox.SystemRandomSource.Save()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Save
        path: ''
        startLine: 1253
      summary: "\nGet the current state to save and restore it later\n"
      example: []
      syntax:
        content:
          CSharp: public SystemRandomSource.State Save()
          VB: Public Function Save As SystemRandomSource.State
        return:
          type: RandomToolbox.SystemRandomSource.State
          description: ''
      overload: RandomToolbox.SystemRandomSource.Save*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.SystemRandomSource.Restore(RandomToolbox.SystemRandomSource.State)
      commentId: M:RandomToolbox.SystemRandomSource.Restore(RandomToolbox.SystemRandomSource.State)
      language: CSharp
      name:
        CSharp: Restore(SystemRandomSource.State)
        VB: Restore(SystemRandomSource.State)
      nameWithType:
        CSharp: SystemRandomSource.Restore(SystemRandomSource.State)
        VB: SystemRandomSource.Restore(SystemRandomSource.State)
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.Restore(RandomToolbox.SystemRandomSource.State)
        VB: RandomToolbox.SystemRandomSource.Restore(RandomToolbox.SystemRandomSource.State)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Restore
        path: ''
        startLine: 1265
      summary: "\nRestore the random source with the given state\n"
      example: []
      syntax:
        content:
          CSharp: public void Restore(SystemRandomSource.State state)
          VB: Public Sub Restore(state As SystemRandomSource.State)
        parameters:
        - id: state
          type: RandomToolbox.SystemRandomSource.State
          description: ''
      overload: RandomToolbox.SystemRandomSource.Restore*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.SystemRandomSource.State
    commentId: T:RandomToolbox.SystemRandomSource.State
    language: CSharp
    name:
      CSharp: SystemRandomSource.State
      VB: SystemRandomSource.State
    nameWithType:
      CSharp: SystemRandomSource.State
      VB: SystemRandomSource.State
    qualifiedName:
      CSharp: RandomToolbox.SystemRandomSource.State
      VB: RandomToolbox.SystemRandomSource.State
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: State
      path: ''
      startLine: 1275
    summary: "\nUsed to save System.Random state\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct State
        VB: >-
          <Serializable>

          Public Structure State
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: RandomToolbox.SystemRandomSource.State.bytes
      commentId: F:RandomToolbox.SystemRandomSource.State.bytes
      language: CSharp
      name:
        CSharp: bytes
        VB: bytes
      nameWithType:
        CSharp: SystemRandomSource.State.bytes
        VB: SystemRandomSource.State.bytes
      qualifiedName:
        CSharp: RandomToolbox.SystemRandomSource.State.bytes
        VB: RandomToolbox.SystemRandomSource.State.bytes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: bytes
        path: ''
        startLine: 1278
      syntax:
        content:
          CSharp: public byte[] bytes
          VB: Public bytes As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.UnityRandomSourceSO
    commentId: T:RandomToolbox.UnityRandomSourceSO
    language: CSharp
    name:
      CSharp: UnityRandomSourceSO
      VB: UnityRandomSourceSO
    nameWithType:
      CSharp: UnityRandomSourceSO
      VB: UnityRandomSourceSO
    qualifiedName:
      CSharp: RandomToolbox.UnityRandomSourceSO
      VB: RandomToolbox.UnityRandomSourceSO
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: UnityRandomSourceSO
      path: ''
      startLine: 1296
    summary: "\nA unityRandomSource instance contained in a ScriptableObject to be used\nin different scenes\n"
    example: []
    syntax:
      content:
        CSharp: 'public class UnityRandomSourceSO : RandomSourceBaseSO'
        VB: >-
          Public Class UnityRandomSourceSO

              Inherits RandomSourceBaseSO
    inheritance:
    - System.Object
    - RandomToolbox.RandomSourceBaseSO
    inheritedMembers:
    - RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
    - RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.UnityRandomSourceSO.Instance
      commentId: F:RandomToolbox.UnityRandomSourceSO.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: UnityRandomSourceSO.Instance
        VB: UnityRandomSourceSO.Instance
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSourceSO.Instance
        VB: RandomToolbox.UnityRandomSourceSO.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Instance
        path: ''
        startLine: 1302
      summary: "\nUnityRandomSource instance\n"
      example: []
      syntax:
        content:
          CSharp: public UnityRandomSource Instance
          VB: Public Instance As UnityRandomSource
        return:
          type: RandomToolbox.UnityRandomSource
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSourceSO.m_baseInstance
      commentId: P:RandomToolbox.UnityRandomSourceSO.m_baseInstance
      language: CSharp
      name:
        CSharp: m_baseInstance
        VB: m_baseInstance
      nameWithType:
        CSharp: UnityRandomSourceSO.m_baseInstance
        VB: UnityRandomSourceSO.m_baseInstance
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSourceSO.m_baseInstance
        VB: RandomToolbox.UnityRandomSourceSO.m_baseInstance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: m_baseInstance
        path: ''
        startLine: 1307
      summary: "\nOverride to give the base class acces to the derived RandomSourceBase instance\n"
      example: []
      syntax:
        content:
          CSharp: protected override RandomSourceBase m_baseInstance { get; }
          VB: Protected Overrides ReadOnly Property m_baseInstance As RandomSourceBase
        parameters: []
        return:
          type: RandomToolbox.RandomSourceBase
      overload: RandomToolbox.UnityRandomSourceSO.m_baseInstance*
      overridden: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      modifiers:
        CSharp:
        - protected
        - override
        - get
        VB:
        - Protected
        - Overrides
        - ReadOnly
  - id: RandomToolbox.UnityRandomSource
    commentId: T:RandomToolbox.UnityRandomSource
    language: CSharp
    name:
      CSharp: UnityRandomSource
      VB: UnityRandomSource
    nameWithType:
      CSharp: UnityRandomSource
      VB: UnityRandomSource
    qualifiedName:
      CSharp: RandomToolbox.UnityRandomSource
      VB: RandomToolbox.UnityRandomSource
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: UnityRandomSource
      path: ''
      startLine: 1313
    summary: "\nSafe Random source based on UnityEngine.Random\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class UnityRandomSource : RandomSourceBase
        VB: >-
          <Serializable>

          Public Class UnityRandomSource

              Inherits RandomSourceBase
    inheritance:
    - System.Object
    - RandomToolbox.RandomSourceBase
    inheritedMembers:
    - RandomToolbox.RandomSourceBase.m_seed
    - RandomToolbox.RandomSourceBase.SeedGenerator
    - RandomToolbox.RandomSourceBase.Seed
    - RandomToolbox.RandomSourceBase.Start(System.Int32)
    - RandomToolbox.RandomSourceBase.Start(System.Boolean)
    - RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
    - RandomToolbox.RandomSourceBase.Reseed
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.UnityRandomSource.#ctor
      commentId: M:RandomToolbox.UnityRandomSource.#ctor
      language: CSharp
      name:
        CSharp: UnityRandomSource()
        VB: UnityRandomSource()
      nameWithType:
        CSharp: UnityRandomSource.UnityRandomSource()
        VB: UnityRandomSource.UnityRandomSource()
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.UnityRandomSource()
        VB: RandomToolbox.UnityRandomSource.UnityRandomSource()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: .ctor
        path: ''
        startLine: 1329
      summary: "\nInstantiate a new UnityRandomSource but does not initialize it\n"
      example: []
      syntax:
        content:
          CSharp: public UnityRandomSource()
          VB: Public Sub New
      overload: RandomToolbox.UnityRandomSource.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.#ctor(System.Int32)
      commentId: M:RandomToolbox.UnityRandomSource.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: UnityRandomSource(Int32)
        VB: UnityRandomSource(Int32)
      nameWithType:
        CSharp: UnityRandomSource.UnityRandomSource(Int32)
        VB: UnityRandomSource.UnityRandomSource(Int32)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.UnityRandomSource(System.Int32)
        VB: RandomToolbox.UnityRandomSource.UnityRandomSource(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: .ctor
        path: ''
        startLine: 1335
      summary: "\nInstantiate a new UnityRandomSource and Initialize with given seed.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityRandomSource(int seed)
          VB: Public Sub New(seed As Integer)
        parameters:
        - id: seed
          type: System.Int32
          description: Seed to initialize the random generator
      overload: RandomToolbox.UnityRandomSource.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.#ctor(RandomToolbox.SeedGenerators.Generator)
      commentId: M:RandomToolbox.UnityRandomSource.#ctor(RandomToolbox.SeedGenerators.Generator)
      language: CSharp
      name:
        CSharp: UnityRandomSource(SeedGenerators.Generator)
        VB: UnityRandomSource(SeedGenerators.Generator)
      nameWithType:
        CSharp: UnityRandomSource.UnityRandomSource(SeedGenerators.Generator)
        VB: UnityRandomSource.UnityRandomSource(SeedGenerators.Generator)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.UnityRandomSource(RandomToolbox.SeedGenerators.Generator)
        VB: RandomToolbox.UnityRandomSource.UnityRandomSource(RandomToolbox.SeedGenerators.Generator)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: .ctor
        path: ''
        startLine: 1346
      summary: "\nInstantiate a new UnityRandomSource with a new generated seed\nbased on given seed generator\n"
      example: []
      syntax:
        content:
          CSharp: public UnityRandomSource(SeedGenerators.Generator seedGenerator)
          VB: Public Sub New(seedGenerator As SeedGenerators.Generator)
        parameters:
        - id: seedGenerator
          type: RandomToolbox.SeedGenerators.Generator
      overload: RandomToolbox.UnityRandomSource.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.Start
      commentId: M:RandomToolbox.UnityRandomSource.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: UnityRandomSource.Start()
        VB: UnityRandomSource.Start()
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.Start()
        VB: RandomToolbox.UnityRandomSource.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Start
        path: ''
        startLine: 1356
      summary: "\nInitialize the Seed system with the current seed\n"
      example: []
      syntax:
        content:
          CSharp: public override void Start()
          VB: Public Overrides Sub Start
      overload: RandomToolbox.UnityRandomSource.Start*
      overridden: RandomToolbox.RandomSourceBase.Start
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: RandomToolbox.UnityRandomSource.value
      commentId: P:RandomToolbox.UnityRandomSource.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: UnityRandomSource.value
        VB: UnityRandomSource.value
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.value
        VB: RandomToolbox.UnityRandomSource.value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: value
        path: ''
        startLine: 1384
      summary: "\nReturns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public float value { get; }
          VB: Public ReadOnly Property value As Single
        parameters: []
        return:
          type: System.Single
      overload: RandomToolbox.UnityRandomSource.value*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.rotation
      commentId: P:RandomToolbox.UnityRandomSource.rotation
      language: CSharp
      name:
        CSharp: rotation
        VB: rotation
      nameWithType:
        CSharp: UnityRandomSource.rotation
        VB: UnityRandomSource.rotation
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.rotation
        VB: RandomToolbox.UnityRandomSource.rotation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: rotation
        path: ''
        startLine: 1389
      summary: "\nReturns a random rotation (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion rotation { get; }
          VB: Public ReadOnly Property rotation As Quaternion
        parameters: []
        return:
          type: Global.Quaternion
      overload: RandomToolbox.UnityRandomSource.rotation*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.rotationUniform
      commentId: P:RandomToolbox.UnityRandomSource.rotationUniform
      language: CSharp
      name:
        CSharp: rotationUniform
        VB: rotationUniform
      nameWithType:
        CSharp: UnityRandomSource.rotationUniform
        VB: UnityRandomSource.rotationUniform
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.rotationUniform
        VB: RandomToolbox.UnityRandomSource.rotationUniform
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: rotationUniform
        path: ''
        startLine: 1394
      summary: "\nReturns a random rotation with uniform distribution (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion rotationUniform { get; }
          VB: Public ReadOnly Property rotationUniform As Quaternion
        parameters: []
        return:
          type: Global.Quaternion
      overload: RandomToolbox.UnityRandomSource.rotationUniform*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.insideUnitCircle
      commentId: P:RandomToolbox.UnityRandomSource.insideUnitCircle
      language: CSharp
      name:
        CSharp: insideUnitCircle
        VB: insideUnitCircle
      nameWithType:
        CSharp: UnityRandomSource.insideUnitCircle
        VB: UnityRandomSource.insideUnitCircle
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.insideUnitCircle
        VB: RandomToolbox.UnityRandomSource.insideUnitCircle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: insideUnitCircle
        path: ''
        startLine: 1399
      summary: "\nReturns a random point inside a circle with radius 1 (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 insideUnitCircle { get; }
          VB: Public ReadOnly Property insideUnitCircle As Vector2
        parameters: []
        return:
          type: Global.Vector2
      overload: RandomToolbox.UnityRandomSource.insideUnitCircle*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.insideUnitSphere
      commentId: P:RandomToolbox.UnityRandomSource.insideUnitSphere
      language: CSharp
      name:
        CSharp: insideUnitSphere
        VB: insideUnitSphere
      nameWithType:
        CSharp: UnityRandomSource.insideUnitSphere
        VB: UnityRandomSource.insideUnitSphere
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.insideUnitSphere
        VB: RandomToolbox.UnityRandomSource.insideUnitSphere
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: insideUnitSphere
        path: ''
        startLine: 1404
      summary: "\nReturns a random point inside a sphere with radius 1 (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 insideUnitSphere { get; }
          VB: Public ReadOnly Property insideUnitSphere As Vector3
        parameters: []
        return:
          type: Global.Vector3
      overload: RandomToolbox.UnityRandomSource.insideUnitSphere*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.onUnitSphere
      commentId: P:RandomToolbox.UnityRandomSource.onUnitSphere
      language: CSharp
      name:
        CSharp: onUnitSphere
        VB: onUnitSphere
      nameWithType:
        CSharp: UnityRandomSource.onUnitSphere
        VB: UnityRandomSource.onUnitSphere
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.onUnitSphere
        VB: RandomToolbox.UnityRandomSource.onUnitSphere
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: onUnitSphere
        path: ''
        startLine: 1409
      summary: "\nReturns a random point on the surface of a sphere with radius 1 (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 onUnitSphere { get; }
          VB: Public ReadOnly Property onUnitSphere As Vector3
        parameters: []
        return:
          type: Global.Vector3
      overload: RandomToolbox.UnityRandomSource.onUnitSphere*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: RandomToolbox.UnityRandomSource.ColorHSV
      commentId: M:RandomToolbox.UnityRandomSource.ColorHSV
      language: CSharp
      name:
        CSharp: ColorHSV()
        VB: ColorHSV()
      nameWithType:
        CSharp: UnityRandomSource.ColorHSV()
        VB: UnityRandomSource.ColorHSV()
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.ColorHSV()
        VB: RandomToolbox.UnityRandomSource.ColorHSV()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ColorHSV
        path: ''
        startLine: 1415
      summary: "\nGenerates a random color from HSV and alpha ranges.\n"
      example: []
      syntax:
        content:
          CSharp: public Color ColorHSV()
          VB: Public Function ColorHSV As Color
        return:
          type: Global.Color
          description: A random color with HSV and alpha values in the input ranges.
      overload: RandomToolbox.UnityRandomSource.ColorHSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single)
      commentId: M:RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ColorHSV(Single, Single)
        VB: ColorHSV(Single, Single)
      nameWithType:
        CSharp: UnityRandomSource.ColorHSV(Single, Single)
        VB: UnityRandomSource.ColorHSV(Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single)
        VB: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ColorHSV
        path: ''
        startLine: 1429
      summary: "\nGenerates a random color from HSV and alpha ranges.\n"
      example: []
      syntax:
        content:
          CSharp: public Color ColorHSV(float hueMin, float hueMax)
          VB: Public Function ColorHSV(hueMin As Single, hueMax As Single) As Color
        parameters:
        - id: hueMin
          type: System.Single
          description: Minimum hue [0..1].
        - id: hueMax
          type: System.Single
          description: Maximum hue [0..1].
        return:
          type: Global.Color
          description: A random color with HSV and alpha values in the input ranges.
      overload: RandomToolbox.UnityRandomSource.ColorHSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single)
      commentId: M:RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ColorHSV(Single, Single, Single, Single)
        VB: ColorHSV(Single, Single, Single, Single)
      nameWithType:
        CSharp: UnityRandomSource.ColorHSV(Single, Single, Single, Single)
        VB: UnityRandomSource.ColorHSV(Single, Single, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single)
        VB: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ColorHSV
        path: ''
        startLine: 1445
      summary: "\nGenerates a random color from HSV and alpha ranges.\n"
      example: []
      syntax:
        content:
          CSharp: public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax)
          VB: Public Function ColorHSV(hueMin As Single, hueMax As Single, saturationMin As Single, saturationMax As Single) As Color
        parameters:
        - id: hueMin
          type: System.Single
          description: Minimum hue [0..1].
        - id: hueMax
          type: System.Single
          description: Maximum hue [0..1].
        - id: saturationMin
          type: System.Single
          description: Minimum saturation [0..1].
        - id: saturationMax
          type: System.Single
          description: Maximum saturation[0..1].
        return:
          type: Global.Color
          description: A random color with HSV and alpha values in the input ranges.
      overload: RandomToolbox.UnityRandomSource.ColorHSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      commentId: M:RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ColorHSV(Single, Single, Single, Single, Single, Single)
        VB: ColorHSV(Single, Single, Single, Single, Single, Single)
      nameWithType:
        CSharp: UnityRandomSource.ColorHSV(Single, Single, Single, Single, Single, Single)
        VB: UnityRandomSource.ColorHSV(Single, Single, Single, Single, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
        VB: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ColorHSV
        path: ''
        startLine: 1463
      summary: "\nGenerates a random color from HSV and alpha ranges.\n"
      example: []
      syntax:
        content:
          CSharp: public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax)
          VB: Public Function ColorHSV(hueMin As Single, hueMax As Single, saturationMin As Single, saturationMax As Single, valueMin As Single, valueMax As Single) As Color
        parameters:
        - id: hueMin
          type: System.Single
          description: Minimum hue [0..1].
        - id: hueMax
          type: System.Single
          description: Maximum hue [0..1].
        - id: saturationMin
          type: System.Single
          description: Minimum saturation [0..1].
        - id: saturationMax
          type: System.Single
          description: Maximum saturation[0..1].
        - id: valueMin
          type: System.Single
          description: Minimum value [0..1].
        - id: valueMax
          type: System.Single
          description: Maximum value [0..1].
        return:
          type: Global.Color
          description: A random color with HSV and alpha values in the input ranges.
      overload: RandomToolbox.UnityRandomSource.ColorHSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      commentId: M:RandomToolbox.UnityRandomSource.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ColorHSV(Single, Single, Single, Single, Single, Single, Single, Single)
        VB: ColorHSV(Single, Single, Single, Single, Single, Single, Single, Single)
      nameWithType:
        CSharp: UnityRandomSource.ColorHSV(Single, Single, Single, Single, Single, Single, Single, Single)
        VB: UnityRandomSource.ColorHSV(Single, Single, Single, Single, Single, Single, Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
        VB: RandomToolbox.UnityRandomSource.ColorHSV(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ColorHSV
        path: ''
        startLine: 1483
      summary: "\nGenerates a random color from HSV and alpha ranges.\n"
      example: []
      syntax:
        content:
          CSharp: public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax, float alphaMin, float alphaMax)
          VB: Public Function ColorHSV(hueMin As Single, hueMax As Single, saturationMin As Single, saturationMax As Single, valueMin As Single, valueMax As Single, alphaMin As Single, alphaMax As Single) As Color
        parameters:
        - id: hueMin
          type: System.Single
          description: Minimum hue [0..1].
        - id: hueMax
          type: System.Single
          description: Maximum hue [0..1].
        - id: saturationMin
          type: System.Single
          description: Minimum saturation [0..1].
        - id: saturationMax
          type: System.Single
          description: Maximum saturation[0..1].
        - id: valueMin
          type: System.Single
          description: Minimum value [0..1].
        - id: valueMax
          type: System.Single
          description: Maximum value [0..1].
        - id: alphaMin
          type: System.Single
          description: Minimum alpha [0..1].
        - id: alphaMax
          type: System.Single
          description: Maximum alpha [0..1].
        return:
          type: Global.Color
          description: A random color with HSV and alpha values in the input ranges.
      overload: RandomToolbox.UnityRandomSource.ColorHSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.Range(System.Int32,System.Int32)
      commentId: M:RandomToolbox.UnityRandomSource.Range(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Range(Int32, Int32)
        VB: Range(Int32, Int32)
      nameWithType:
        CSharp: UnityRandomSource.Range(Int32, Int32)
        VB: UnityRandomSource.Range(Int32, Int32)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.Range(System.Int32, System.Int32)
        VB: RandomToolbox.UnityRandomSource.Range(System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Range
        path: ''
        startLine: 1497
      summary: "\nReturn a random integer number between min [inclusive] and max [exclusive] (ReadOnly).\n"
      example: []
      syntax:
        content:
          CSharp: public int Range(int min, int max)
          VB: Public Function Range(min As Integer, max As Integer) As Integer
        parameters:
        - id: min
          type: System.Int32
          description: min int value [inclusive]
        - id: max
          type: System.Int32
          description: max int value [exclusive]
        return:
          type: System.Int32
          description: random integer number
      overload: RandomToolbox.UnityRandomSource.Range*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.Range(System.Single,System.Single)
      commentId: M:RandomToolbox.UnityRandomSource.Range(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Range(Single, Single)
        VB: Range(Single, Single)
      nameWithType:
        CSharp: UnityRandomSource.Range(Single, Single)
        VB: UnityRandomSource.Range(Single, Single)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.Range(System.Single, System.Single)
        VB: RandomToolbox.UnityRandomSource.Range(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Range
        path: ''
        startLine: 1511
      summary: "\nReturn a random float number between min [inclusive] and max [inclusive] (ReadOnly).\n"
      example: []
      syntax:
        content:
          CSharp: public float Range(float min, float max)
          VB: Public Function Range(min As Single, max As Single) As Single
        parameters:
        - id: min
          type: System.Single
          description: min float value [inclusive]
        - id: max
          type: System.Single
          description: max float value [inclusive]
        return:
          type: System.Single
          description: random float number
      overload: RandomToolbox.UnityRandomSource.Range*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.Save
      commentId: M:RandomToolbox.UnityRandomSource.Save
      language: CSharp
      name:
        CSharp: Save()
        VB: Save()
      nameWithType:
        CSharp: UnityRandomSource.Save()
        VB: UnityRandomSource.Save()
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.Save()
        VB: RandomToolbox.UnityRandomSource.Save()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Save
        path: ''
        startLine: 1523
      summary: "\nGet the current state to save and restore it later\n"
      example: []
      syntax:
        content:
          CSharp: public Random.State Save()
          VB: Public Function Save As Random.State
        return:
          type: System.Random.State
          description: ''
      overload: RandomToolbox.UnityRandomSource.Save*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.UnityRandomSource.Restore(System.Random.State)
      commentId: M:RandomToolbox.UnityRandomSource.Restore(System.Random.State)
      language: CSharp
      name:
        CSharp: Restore(Random.State)
        VB: Restore(Random.State)
      nameWithType:
        CSharp: UnityRandomSource.Restore(Random.State)
        VB: UnityRandomSource.Restore(Random.State)
      qualifiedName:
        CSharp: RandomToolbox.UnityRandomSource.Restore(System.Random.State)
        VB: RandomToolbox.UnityRandomSource.Restore(System.Random.State)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: Restore
        path: ''
        startLine: 1532
      summary: "\nRestore the random source with the given state\n"
      example: []
      syntax:
        content:
          CSharp: public void Restore(Random.State state)
          VB: Public Sub Restore(state As Random.State)
        parameters:
        - id: state
          type: System.Random.State
          description: ''
      overload: RandomToolbox.UnityRandomSource.Restore*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.PartitionTester
    commentId: T:RandomToolbox.PartitionTester
    language: CSharp
    name:
      CSharp: PartitionTester
      VB: PartitionTester
    nameWithType:
      CSharp: PartitionTester
      VB: PartitionTester
    qualifiedName:
      CSharp: RandomToolbox.PartitionTester
      VB: RandomToolbox.PartitionTester
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: PartitionTester
      path: ''
      startLine: 1731
    syntax:
      content:
        CSharp: public class PartitionTester
        VB: Public Class PartitionTester
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh
      commentId: M:RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh
      language: CSharp
      name:
        CSharp: PartitionCorrectionWhenSumTooHigh()
        VB: PartitionCorrectionWhenSumTooHigh()
      nameWithType:
        CSharp: PartitionTester.PartitionCorrectionWhenSumTooHigh()
        VB: PartitionTester.PartitionCorrectionWhenSumTooHigh()
      qualifiedName:
        CSharp: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh()
        VB: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: PartitionCorrectionWhenSumTooHigh
        path: ''
        startLine: 1733
      syntax:
        content:
          CSharp: public void PartitionCorrectionWhenSumTooHigh()
          VB: Public Sub PartitionCorrectionWhenSumTooHigh
      overload: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow
      commentId: M:RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow
      language: CSharp
      name:
        CSharp: PartitionCorrectionWhenSumTooLow()
        VB: PartitionCorrectionWhenSumTooLow()
      nameWithType:
        CSharp: PartitionTester.PartitionCorrectionWhenSumTooLow()
        VB: PartitionTester.PartitionCorrectionWhenSumTooLow()
      qualifiedName:
        CSharp: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow()
        VB: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: PartitionCorrectionWhenSumTooLow
        path: ''
        startLine: 1746
      syntax:
        content:
          CSharp: public void PartitionCorrectionWhenSumTooLow()
          VB: Public Sub PartitionCorrectionWhenSumTooLow
      overload: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne
      commentId: M:RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne
      language: CSharp
      name:
        CSharp: NoPartitionCorrectionWhenSumIsOne()
        VB: NoPartitionCorrectionWhenSumIsOne()
      nameWithType:
        CSharp: PartitionTester.NoPartitionCorrectionWhenSumIsOne()
        VB: PartitionTester.NoPartitionCorrectionWhenSumIsOne()
      qualifiedName:
        CSharp: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne()
        VB: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: NoPartitionCorrectionWhenSumIsOne
        path: ''
        startLine: 1759
      syntax:
        content:
          CSharp: public void NoPartitionCorrectionWhenSumIsOne()
          VB: Public Sub NoPartitionCorrectionWhenSumIsOne
      overload: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionTester.TestAddElement
      commentId: M:RandomToolbox.PartitionTester.TestAddElement
      language: CSharp
      name:
        CSharp: TestAddElement()
        VB: TestAddElement()
      nameWithType:
        CSharp: PartitionTester.TestAddElement()
        VB: PartitionTester.TestAddElement()
      qualifiedName:
        CSharp: RandomToolbox.PartitionTester.TestAddElement()
        VB: RandomToolbox.PartitionTester.TestAddElement()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: TestAddElement
        path: ''
        startLine: 1777
      syntax:
        content:
          CSharp: public void TestAddElement()
          VB: Public Sub TestAddElement
      overload: RandomToolbox.PartitionTester.TestAddElement*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.PartitionTester.TestAddElementGeneric
      commentId: M:RandomToolbox.PartitionTester.TestAddElementGeneric
      language: CSharp
      name:
        CSharp: TestAddElementGeneric()
        VB: TestAddElementGeneric()
      nameWithType:
        CSharp: PartitionTester.TestAddElementGeneric()
        VB: PartitionTester.TestAddElementGeneric()
      qualifiedName:
        CSharp: RandomToolbox.PartitionTester.TestAddElementGeneric()
        VB: RandomToolbox.PartitionTester.TestAddElementGeneric()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: TestAddElementGeneric
        path: ''
        startLine: 1796
      syntax:
        content:
          CSharp: public void TestAddElementGeneric()
          VB: Public Sub TestAddElementGeneric
      overload: RandomToolbox.PartitionTester.TestAddElementGeneric*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: RandomToolbox.RandomSourcesTests
    commentId: T:RandomToolbox.RandomSourcesTests
    language: CSharp
    name:
      CSharp: RandomSourcesTests
      VB: RandomSourcesTests
    nameWithType:
      CSharp: RandomSourcesTests
      VB: RandomSourcesTests
    qualifiedName:
      CSharp: RandomToolbox.RandomSourcesTests
      VB: RandomToolbox.RandomSourcesTests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: RandomToolbox
    source:
      id: RandomSourcesTests
      path: ''
      startLine: 1824
    syntax:
      content:
        CSharp: public class RandomSourcesTests
        VB: Public Class RandomSourcesTests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
      commentId: M:RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
      language: CSharp
      name:
        CSharp: MultipleSeedSystemInstanceAsNoImpact()
        VB: MultipleSeedSystemInstanceAsNoImpact()
      nameWithType:
        CSharp: RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact()
        VB: RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact()
        VB: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: MultipleSeedSystemInstanceAsNoImpact
        path: ''
        startLine: 1830
      summary: "\nCheck that when having multiples UnityRandomSources instances\nthe result of each instance is always the same\n"
      example: []
      syntax:
        content:
          CSharp: public void MultipleSeedSystemInstanceAsNoImpact()
          VB: Public Sub MultipleSeedSystemInstanceAsNoImpact
      overload: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
      commentId: M:RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
      language: CSharp
      name:
        CSharp: ExternUnityEngineRandomCallAsNoImpact()
        VB: ExternUnityEngineRandomCallAsNoImpact()
      nameWithType:
        CSharp: RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact()
        VB: RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact()
        VB: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: ExternUnityEngineRandomCallAsNoImpact
        path: ''
        startLine: 1873
      summary: "\nCheck that calling directly UnityEngine.Random doesn&apos;t impact\na UnityRandomSource instance results\n"
      example: []
      syntax:
        content:
          CSharp: public void ExternUnityEngineRandomCallAsNoImpact()
          VB: Public Sub ExternUnityEngineRandomCallAsNoImpact
      overload: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
      commentId: M:RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
      language: CSharp
      name:
        CSharp: UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
        VB: UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
      nameWithType:
        CSharp: RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
        VB: RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
        VB: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: UnityRandomSourceRestartDoesntImpactUnityEngineRandom
        path: ''
        startLine: 1914
      summary: "\nCheck that restarting a UnityRandomSource instance doesn&apos;t\nrestart UnityEngine.Random\n"
      example: []
      syntax:
        content:
          CSharp: public void UnityRandomSourceRestartDoesntImpactUnityEngineRandom()
          VB: Public Sub UnityRandomSourceRestartDoesntImpactUnityEngineRandom
      overload: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore
      commentId: M:RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore
      language: CSharp
      name:
        CSharp: UnityRandomSourceSaveAndRestore()
        VB: UnityRandomSourceSaveAndRestore()
      nameWithType:
        CSharp: RandomSourcesTests.UnityRandomSourceSaveAndRestore()
        VB: RandomSourcesTests.UnityRandomSourceSaveAndRestore()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore()
        VB: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: UnityRandomSourceSaveAndRestore
        path: ''
        startLine: 1954
      summary: "\nCheck that saving and restoring a UnityRandomSource instance work\n"
      example: []
      syntax:
        content:
          CSharp: public void UnityRandomSourceSaveAndRestore()
          VB: Public Sub UnityRandomSourceSaveAndRestore
      overload: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore
      commentId: M:RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore
      language: CSharp
      name:
        CSharp: SystemRandomSourceSaveAndRestore()
        VB: SystemRandomSourceSaveAndRestore()
      nameWithType:
        CSharp: RandomSourcesTests.SystemRandomSourceSaveAndRestore()
        VB: RandomSourcesTests.SystemRandomSourceSaveAndRestore()
      qualifiedName:
        CSharp: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore()
        VB: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: RandomToolbox
      source:
        id: SystemRandomSourceSaveAndRestore
        path: ''
        startLine: 1996
      summary: "\nCheck that saving and restoring a SystemRandomSource instance work\n"
      example: []
      syntax:
        content:
          CSharp: public void SystemRandomSourceSaveAndRestore()
          VB: Public Sub SystemRandomSourceSaveAndRestore
      overload: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.SerializedProperty:
    name:
      CSharp:
      - id: Global.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      VB:
      - id: Global.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
    isDefinition: true
  Global.GUIContent:
    name:
      CSharp:
      - id: Global.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      VB:
      - id: Global.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
    isDefinition: true
  RandomToolbox.PartitionDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: PartitionDrawer.GetPropertyHeight
        qualifiedName: RandomToolbox.PartitionDrawer.GetPropertyHeight
      VB:
      - id: RandomToolbox.PartitionDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: PartitionDrawer.GetPropertyHeight
        qualifiedName: RandomToolbox.PartitionDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionDrawer.GetPropertyHeight
  Global.Rect:
    name:
      CSharp:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
  RandomToolbox.PartitionDrawer.OnGUI*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionDrawer.OnGUI*
        name: OnGUI
        nameWithType: PartitionDrawer.OnGUI
        qualifiedName: RandomToolbox.PartitionDrawer.OnGUI
      VB:
      - id: RandomToolbox.PartitionDrawer.OnGUI*
        name: OnGUI
        nameWithType: PartitionDrawer.OnGUI
        qualifiedName: RandomToolbox.PartitionDrawer.OnGUI
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionDrawer.OnGUI
  RandomToolbox.PartitionDrawer:
    name:
      CSharp:
      - id: RandomToolbox.PartitionDrawer
        name: PartitionDrawer
        nameWithType: PartitionDrawer
        qualifiedName: RandomToolbox.PartitionDrawer
      VB:
      - id: RandomToolbox.PartitionDrawer
        name: PartitionDrawer
        nameWithType: PartitionDrawer
        qualifiedName: RandomToolbox.PartitionDrawer
    isDefinition: true
    commentId: T:RandomToolbox.PartitionDrawer
  RandomToolbox.PartitionElementDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionElementDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: PartitionElementDrawer.GetPropertyHeight
        qualifiedName: RandomToolbox.PartitionElementDrawer.GetPropertyHeight
      VB:
      - id: RandomToolbox.PartitionElementDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: PartitionElementDrawer.GetPropertyHeight
        qualifiedName: RandomToolbox.PartitionElementDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionElementDrawer.GetPropertyHeight
  RandomToolbox.PartitionElementDrawer.OnGUI*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionElementDrawer.OnGUI*
        name: OnGUI
        nameWithType: PartitionElementDrawer.OnGUI
        qualifiedName: RandomToolbox.PartitionElementDrawer.OnGUI
      VB:
      - id: RandomToolbox.PartitionElementDrawer.OnGUI*
        name: OnGUI
        nameWithType: PartitionElementDrawer.OnGUI
        qualifiedName: RandomToolbox.PartitionElementDrawer.OnGUI
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionElementDrawer.OnGUI
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  RandomToolbox.PartitionElementDrawer.GetIndexFromPath*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionElementDrawer.GetIndexFromPath*
        name: GetIndexFromPath
        nameWithType: PartitionElementDrawer.GetIndexFromPath
        qualifiedName: RandomToolbox.PartitionElementDrawer.GetIndexFromPath
      VB:
      - id: RandomToolbox.PartitionElementDrawer.GetIndexFromPath*
        name: GetIndexFromPath
        nameWithType: PartitionElementDrawer.GetIndexFromPath
        qualifiedName: RandomToolbox.PartitionElementDrawer.GetIndexFromPath
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionElementDrawer.GetIndexFromPath
  RandomToolbox.PartitionElementDrawer:
    name:
      CSharp:
      - id: RandomToolbox.PartitionElementDrawer
        name: PartitionElementDrawer
        nameWithType: PartitionElementDrawer
        qualifiedName: RandomToolbox.PartitionElementDrawer
      VB:
      - id: RandomToolbox.PartitionElementDrawer
        name: PartitionElementDrawer
        nameWithType: PartitionElementDrawer
        qualifiedName: RandomToolbox.PartitionElementDrawer
    isDefinition: true
    commentId: T:RandomToolbox.PartitionElementDrawer
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Collections.Generic.IReadOnlyList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IReadOnlyList`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IReadOnlyList{RandomToolbox.PartitionBase.ElementBase}:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: RandomToolbox.PartitionBase.ElementBase
        name: PartitionBase.ElementBase
        nameWithType: PartitionBase.ElementBase
        qualifiedName: RandomToolbox.PartitionBase.ElementBase
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: RandomToolbox.PartitionBase.ElementBase
        name: PartitionBase.ElementBase
        nameWithType: PartitionBase.ElementBase
        qualifiedName: RandomToolbox.PartitionBase.ElementBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IReadOnlyList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IReadOnlyList{RandomToolbox.PartitionBase.ElementBase}
  RandomToolbox.PartitionBase._elements*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase._elements*
        name: _elements
        nameWithType: PartitionBase._elements
        qualifiedName: RandomToolbox.PartitionBase._elements
      VB:
      - id: RandomToolbox.PartitionBase._elements*
        name: _elements
        nameWithType: PartitionBase._elements
        qualifiedName: RandomToolbox.PartitionBase._elements
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase._elements
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  RandomToolbox.PartitionBase.IsCorrect*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.IsCorrect*
        name: IsCorrect
        nameWithType: PartitionBase.IsCorrect
        qualifiedName: RandomToolbox.PartitionBase.IsCorrect
      VB:
      - id: RandomToolbox.PartitionBase.IsCorrect*
        name: IsCorrect
        nameWithType: PartitionBase.IsCorrect
        qualifiedName: RandomToolbox.PartitionBase.IsCorrect
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.IsCorrect
  RandomToolbox.PartitionBase.GetIndex*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.GetIndex*
        name: GetIndex
        nameWithType: PartitionBase.GetIndex
        qualifiedName: RandomToolbox.PartitionBase.GetIndex
      VB:
      - id: RandomToolbox.PartitionBase.GetIndex*
        name: GetIndex
        nameWithType: PartitionBase.GetIndex
        qualifiedName: RandomToolbox.PartitionBase.GetIndex
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.GetIndex
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  RandomToolbox:
    name:
      CSharp:
      - name: RandomToolbox
        nameWithType: RandomToolbox
        qualifiedName: RandomToolbox
      VB:
      - name: RandomToolbox
        nameWithType: RandomToolbox
        qualifiedName: RandomToolbox
    isDefinition: true
    commentId: N:RandomToolbox
  RandomToolbox.PartitionBase.CorrectionRule:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      VB:
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.PartitionBase.CorrectionRule
  RandomToolbox.PartitionBase.SetValues*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.SetValues*
        name: SetValues
        nameWithType: PartitionBase.SetValues
        qualifiedName: RandomToolbox.PartitionBase.SetValues
      VB:
      - id: RandomToolbox.PartitionBase.SetValues*
        name: SetValues
        nameWithType: PartitionBase.SetValues
        qualifiedName: RandomToolbox.PartitionBase.SetValues
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.SetValues
  RandomToolbox.PartitionBase.SetValue*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.SetValue*
        name: SetValue
        nameWithType: PartitionBase.SetValue
        qualifiedName: RandomToolbox.PartitionBase.SetValue
      VB:
      - id: RandomToolbox.PartitionBase.SetValue*
        name: SetValue
        nameWithType: PartitionBase.SetValue
        qualifiedName: RandomToolbox.PartitionBase.SetValue
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.SetValue
  RandomToolbox.PartitionBase.CorrectPartition*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.CorrectPartition*
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
      VB:
      - id: RandomToolbox.PartitionBase.CorrectPartition*
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.CorrectPartition
  RandomToolbox.PartitionBase.DefaultPartitionCorrection*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.DefaultPartitionCorrection*
        name: DefaultPartitionCorrection
        nameWithType: PartitionBase.DefaultPartitionCorrection
        qualifiedName: RandomToolbox.PartitionBase.DefaultPartitionCorrection
      VB:
      - id: RandomToolbox.PartitionBase.DefaultPartitionCorrection*
        name: DefaultPartitionCorrection
        nameWithType: PartitionBase.DefaultPartitionCorrection
        qualifiedName: RandomToolbox.PartitionBase.DefaultPartitionCorrection
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionBase.DefaultPartitionCorrection
  RandomToolbox.PartitionBase:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase
        name: PartitionBase
        nameWithType: PartitionBase
        qualifiedName: RandomToolbox.PartitionBase
      VB:
      - id: RandomToolbox.PartitionBase
        name: PartitionBase
        nameWithType: PartitionBase
        qualifiedName: RandomToolbox.PartitionBase
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.PartitionBase
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Global.Color:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
    isDefinition: true
  RandomToolbox.PartitionBase.ElementBase:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.ElementBase
        name: PartitionBase.ElementBase
        nameWithType: PartitionBase.ElementBase
        qualifiedName: RandomToolbox.PartitionBase.ElementBase
      VB:
      - id: RandomToolbox.PartitionBase.ElementBase
        name: PartitionBase.ElementBase
        nameWithType: PartitionBase.ElementBase
        qualifiedName: RandomToolbox.PartitionBase.ElementBase
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.PartitionBase.ElementBase
  RandomToolbox.PartitionBase.IsCorrect:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.IsCorrect
        name: IsCorrect
        nameWithType: PartitionBase.IsCorrect
        qualifiedName: RandomToolbox.PartitionBase.IsCorrect
      VB:
      - id: RandomToolbox.PartitionBase.IsCorrect
        name: IsCorrect
        nameWithType: PartitionBase.IsCorrect
        qualifiedName: RandomToolbox.PartitionBase.IsCorrect
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: P:RandomToolbox.PartitionBase.IsCorrect
  RandomToolbox.PartitionBase.GetIndex(System.Single):
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.GetIndex(System.Single)
        name: GetIndex
        nameWithType: PartitionBase.GetIndex
        qualifiedName: RandomToolbox.PartitionBase.GetIndex
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.GetIndex(System.Single)
        name: GetIndex
        nameWithType: PartitionBase.GetIndex
        qualifiedName: RandomToolbox.PartitionBase.GetIndex
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.GetIndex(System.Single)
  RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule):
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
        name: SetValues
        nameWithType: PartitionBase.SetValues
        qualifiedName: RandomToolbox.PartitionBase.SetValues
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
        name: SetValues
        nameWithType: PartitionBase.SetValues
        qualifiedName: RandomToolbox.PartitionBase.SetValues
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.SetValues(System.Single[],RandomToolbox.PartitionBase.CorrectionRule)
  RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule):
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
        name: SetValue
        nameWithType: PartitionBase.SetValue
        qualifiedName: RandomToolbox.PartitionBase.SetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
        name: SetValue
        nameWithType: PartitionBase.SetValue
        qualifiedName: RandomToolbox.PartitionBase.SetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.SetValue(System.Int32,System.Single,RandomToolbox.PartitionBase.CorrectionRule)
  ? RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
  : name:
      CSharp:
      - id: RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.CorrectPartition(RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
  RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[]):
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
        name: DefaultPartitionCorrection
        nameWithType: PartitionBase.DefaultPartitionCorrection
        qualifiedName: RandomToolbox.PartitionBase.DefaultPartitionCorrection
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
        name: DefaultPartitionCorrection
        nameWithType: PartitionBase.DefaultPartitionCorrection
        qualifiedName: RandomToolbox.PartitionBase.DefaultPartitionCorrection
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.DefaultPartitionCorrection(System.Single[])
  ? RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
  : name:
      CSharp:
      - id: RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
        name: CorrectPartition
        nameWithType: PartitionBase.CorrectPartition
        qualifiedName: RandomToolbox.PartitionBase.CorrectPartition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: RandomToolbox.PartitionBase.CorrectionRule
        name: PartitionBase.CorrectionRule
        nameWithType: PartitionBase.CorrectionRule
        qualifiedName: RandomToolbox.PartitionBase.CorrectionRule
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: M:RandomToolbox.PartitionBase.CorrectPartition(System.Single[],RandomToolbox.PartitionBase.CorrectionRule,System.Int32,System.Single,System.Single)
  RandomToolbox.PartitionBase._elements:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase._elements
        name: _elements
        nameWithType: PartitionBase._elements
        qualifiedName: RandomToolbox.PartitionBase._elements
      VB:
      - id: RandomToolbox.PartitionBase._elements
        name: _elements
        nameWithType: PartitionBase._elements
        qualifiedName: RandomToolbox.PartitionBase._elements
    isDefinition: true
    parent: RandomToolbox.PartitionBase
    commentId: P:RandomToolbox.PartitionBase._elements
  RandomToolbox.Partition._elements*:
    name:
      CSharp:
      - id: RandomToolbox.Partition._elements*
        name: _elements
        nameWithType: Partition._elements
        qualifiedName: RandomToolbox.Partition._elements
      VB:
      - id: RandomToolbox.Partition._elements*
        name: _elements
        nameWithType: Partition._elements
        qualifiedName: RandomToolbox.Partition._elements
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition._elements
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{RandomToolbox.Partition.Element}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: RandomToolbox.Partition.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: RandomToolbox.Partition.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{RandomToolbox.Partition.Element}
  RandomToolbox.Partition.Element:
    name:
      CSharp:
      - id: RandomToolbox.Partition.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      VB:
      - id: RandomToolbox.Partition.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.Partition.Element
  RandomToolbox.Partition.GetElement*:
    name:
      CSharp:
      - id: RandomToolbox.Partition.GetElement*
        name: GetElement
        nameWithType: Partition.GetElement
        qualifiedName: RandomToolbox.Partition.GetElement
      VB:
      - id: RandomToolbox.Partition.GetElement*
        name: GetElement
        nameWithType: Partition.GetElement
        qualifiedName: RandomToolbox.Partition.GetElement
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition.GetElement
  RandomToolbox.Partition.AddElement*:
    name:
      CSharp:
      - id: RandomToolbox.Partition.AddElement*
        name: AddElement
        nameWithType: Partition.AddElement
        qualifiedName: RandomToolbox.Partition.AddElement
      VB:
      - id: RandomToolbox.Partition.AddElement*
        name: AddElement
        nameWithType: Partition.AddElement
        qualifiedName: RandomToolbox.Partition.AddElement
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition.AddElement
  RandomToolbox.Partition.RemoveElementAt*:
    name:
      CSharp:
      - id: RandomToolbox.Partition.RemoveElementAt*
        name: RemoveElementAt
        nameWithType: Partition.RemoveElementAt
        qualifiedName: RandomToolbox.Partition.RemoveElementAt
      VB:
      - id: RandomToolbox.Partition.RemoveElementAt*
        name: RemoveElementAt
        nameWithType: Partition.RemoveElementAt
        qualifiedName: RandomToolbox.Partition.RemoveElementAt
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition.RemoveElementAt
  RandomToolbox.Partition:
    name:
      CSharp:
      - id: RandomToolbox.Partition
        name: Partition
        nameWithType: Partition
        qualifiedName: RandomToolbox.Partition
      VB:
      - id: RandomToolbox.Partition
        name: Partition
        nameWithType: Partition
        qualifiedName: RandomToolbox.Partition
    isDefinition: true
    commentId: T:RandomToolbox.Partition
  RandomToolbox.PartitionBase.ElementBase.Color:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.ElementBase.Color
        name: Color
        nameWithType: PartitionBase.ElementBase.Color
        qualifiedName: RandomToolbox.PartitionBase.ElementBase.Color
      VB:
      - id: RandomToolbox.PartitionBase.ElementBase.Color
        name: Color
        nameWithType: PartitionBase.ElementBase.Color
        qualifiedName: RandomToolbox.PartitionBase.ElementBase.Color
    isDefinition: true
    parent: RandomToolbox.PartitionBase.ElementBase
    commentId: F:RandomToolbox.PartitionBase.ElementBase.Color
  RandomToolbox.PartitionBase.ElementBase.Value:
    name:
      CSharp:
      - id: RandomToolbox.PartitionBase.ElementBase.Value
        name: Value
        nameWithType: PartitionBase.ElementBase.Value
        qualifiedName: RandomToolbox.PartitionBase.ElementBase.Value
      VB:
      - id: RandomToolbox.PartitionBase.ElementBase.Value
        name: Value
        nameWithType: PartitionBase.ElementBase.Value
        qualifiedName: RandomToolbox.PartitionBase.ElementBase.Value
    isDefinition: true
    parent: RandomToolbox.PartitionBase.ElementBase
    commentId: F:RandomToolbox.PartitionBase.ElementBase.Value
  RandomToolbox.Partition`1._elements*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1._elements*
        name: _elements
        nameWithType: Partition<T>._elements
        qualifiedName: RandomToolbox.Partition<T>._elements
      VB:
      - id: RandomToolbox.Partition`1._elements*
        name: _elements
        nameWithType: Partition(Of T)._elements
        qualifiedName: RandomToolbox.Partition(Of T)._elements
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1._elements
  System.Collections.Generic.List{RandomToolbox.Partition`1.Element}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: RandomToolbox.Partition`1.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: RandomToolbox.Partition`1.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{RandomToolbox.Partition`1.Element}
  RandomToolbox.Partition`1.Element:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: RandomToolbox.Partition`1.Element
        name: Partition.Element
        nameWithType: Partition.Element
        qualifiedName: RandomToolbox.Partition.Element
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.Partition`1.Element
  RandomToolbox.Partition`1.GetElement*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.GetElement*
        name: GetElement
        nameWithType: Partition<T>.GetElement
        qualifiedName: RandomToolbox.Partition<T>.GetElement
      VB:
      - id: RandomToolbox.Partition`1.GetElement*
        name: GetElement
        nameWithType: Partition(Of T).GetElement
        qualifiedName: RandomToolbox.Partition(Of T).GetElement
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1.GetElement
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  RandomToolbox.Partition`1.GetObject*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.GetObject*
        name: GetObject
        nameWithType: Partition<T>.GetObject
        qualifiedName: RandomToolbox.Partition<T>.GetObject
      VB:
      - id: RandomToolbox.Partition`1.GetObject*
        name: GetObject
        nameWithType: Partition(Of T).GetObject
        qualifiedName: RandomToolbox.Partition(Of T).GetObject
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1.GetObject
  RandomToolbox.Partition`1.Contains*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.Contains*
        name: Contains
        nameWithType: Partition<T>.Contains
        qualifiedName: RandomToolbox.Partition<T>.Contains
      VB:
      - id: RandomToolbox.Partition`1.Contains*
        name: Contains
        nameWithType: Partition(Of T).Contains
        qualifiedName: RandomToolbox.Partition(Of T).Contains
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1.Contains
  RandomToolbox.Partition`1.AddElement*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.AddElement*
        name: AddElement
        nameWithType: Partition<T>.AddElement
        qualifiedName: RandomToolbox.Partition<T>.AddElement
      VB:
      - id: RandomToolbox.Partition`1.AddElement*
        name: AddElement
        nameWithType: Partition(Of T).AddElement
        qualifiedName: RandomToolbox.Partition(Of T).AddElement
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1.AddElement
  RandomToolbox.Partition`1.RemoveElementAt*:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1.RemoveElementAt*
        name: RemoveElementAt
        nameWithType: Partition<T>.RemoveElementAt
        qualifiedName: RandomToolbox.Partition<T>.RemoveElementAt
      VB:
      - id: RandomToolbox.Partition`1.RemoveElementAt*
        name: RemoveElementAt
        nameWithType: Partition(Of T).RemoveElementAt
        qualifiedName: RandomToolbox.Partition(Of T).RemoveElementAt
    isDefinition: true
    commentId: Overload:RandomToolbox.Partition`1.RemoveElementAt
  RandomToolbox.Partition`1:
    name:
      CSharp:
      - id: RandomToolbox.Partition`1
        name: Partition
        nameWithType: Partition
        qualifiedName: RandomToolbox.Partition
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: RandomToolbox.Partition`1
        name: Partition
        nameWithType: Partition
        qualifiedName: RandomToolbox.Partition
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:RandomToolbox.Partition`1
  RandomToolbox.RandomSourceBase:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase
        name: RandomSourceBase
        nameWithType: RandomSourceBase
        qualifiedName: RandomToolbox.RandomSourceBase
      VB:
      - id: RandomToolbox.RandomSourceBase
        name: RandomSourceBase
        nameWithType: RandomSourceBase
        qualifiedName: RandomToolbox.RandomSourceBase
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.RandomSourceBase
  RandomToolbox.RandomSourceBaseSO.Instance*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.Instance*
        name: Instance
        nameWithType: RandomSourceBaseSO.Instance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.Instance
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.Instance*
        name: Instance
        nameWithType: RandomSourceBaseSO.Instance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.Instance
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBaseSO.Instance
  RandomToolbox.RandomSourceBaseSO.m_baseInstance*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: RandomSourceBaseSO.m_baseInstance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: RandomSourceBaseSO.m_baseInstance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBaseSO.m_baseInstance
  RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*
        name: InitializeOnAwake
        nameWithType: RandomSourceBaseSO.InitializeOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake*
        name: InitializeOnAwake
        nameWithType: RandomSourceBaseSO.InitializeOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*
        name: ReseedOnAwake
        nameWithType: RandomSourceBaseSO.ReseedOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake*
        name: ReseedOnAwake
        nameWithType: RandomSourceBaseSO.ReseedOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  RandomToolbox.RandomSourceBaseSO:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO
        name: RandomSourceBaseSO
        nameWithType: RandomSourceBaseSO
        qualifiedName: RandomToolbox.RandomSourceBaseSO
      VB:
      - id: RandomToolbox.RandomSourceBaseSO
        name: RandomSourceBaseSO
        nameWithType: RandomSourceBaseSO
        qualifiedName: RandomToolbox.RandomSourceBaseSO
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.RandomSourceBaseSO
  RandomToolbox.SeedGenerators.Generator:
    name:
      CSharp:
      - id: RandomToolbox.SeedGenerators.Generator
        name: SeedGenerators.Generator
        nameWithType: SeedGenerators.Generator
        qualifiedName: RandomToolbox.SeedGenerators.Generator
      VB:
      - id: RandomToolbox.SeedGenerators.Generator
        name: SeedGenerators.Generator
        nameWithType: SeedGenerators.Generator
        qualifiedName: RandomToolbox.SeedGenerators.Generator
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.SeedGenerators.Generator
  RandomToolbox.RandomSourceBase.Seed*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Seed*
        name: Seed
        nameWithType: RandomSourceBase.Seed
        qualifiedName: RandomToolbox.RandomSourceBase.Seed
      VB:
      - id: RandomToolbox.RandomSourceBase.Seed*
        name: Seed
        nameWithType: RandomSourceBase.Seed
        qualifiedName: RandomToolbox.RandomSourceBase.Seed
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBase.Seed
  RandomToolbox.RandomSourceBase.Start*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Start*
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      VB:
      - id: RandomToolbox.RandomSourceBase.Start*
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBase.Start
  RandomToolbox.RandomSourceBase.Reseed*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Reseed*
        name: Reseed
        nameWithType: RandomSourceBase.Reseed
        qualifiedName: RandomToolbox.RandomSourceBase.Reseed
      VB:
      - id: RandomToolbox.RandomSourceBase.Reseed*
        name: Reseed
        nameWithType: RandomSourceBase.Reseed
        qualifiedName: RandomToolbox.RandomSourceBase.Reseed
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourceBase.Reseed
  RandomToolbox.SeedGenerators.GetSeed*:
    name:
      CSharp:
      - id: RandomToolbox.SeedGenerators.GetSeed*
        name: GetSeed
        nameWithType: SeedGenerators.GetSeed
        qualifiedName: RandomToolbox.SeedGenerators.GetSeed
      VB:
      - id: RandomToolbox.SeedGenerators.GetSeed*
        name: GetSeed
        nameWithType: SeedGenerators.GetSeed
        qualifiedName: RandomToolbox.SeedGenerators.GetSeed
    isDefinition: true
    commentId: Overload:RandomToolbox.SeedGenerators.GetSeed
  RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed*:
    name:
      CSharp:
      - id: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed*
        name: CurrentDateTimeBasedSeed
        nameWithType: SeedGenerators.CurrentDateTimeBasedSeed
        qualifiedName: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed
      VB:
      - id: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed*
        name: CurrentDateTimeBasedSeed
        nameWithType: SeedGenerators.CurrentDateTimeBasedSeed
        qualifiedName: RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed
    isDefinition: true
    commentId: Overload:RandomToolbox.SeedGenerators.CurrentDateTimeBasedSeed
  RandomToolbox.SeedGenerators.SystemStartTimeSeed*:
    name:
      CSharp:
      - id: RandomToolbox.SeedGenerators.SystemStartTimeSeed*
        name: SystemStartTimeSeed
        nameWithType: SeedGenerators.SystemStartTimeSeed
        qualifiedName: RandomToolbox.SeedGenerators.SystemStartTimeSeed
      VB:
      - id: RandomToolbox.SeedGenerators.SystemStartTimeSeed*
        name: SystemStartTimeSeed
        nameWithType: SeedGenerators.SystemStartTimeSeed
        qualifiedName: RandomToolbox.SeedGenerators.SystemStartTimeSeed
    isDefinition: true
    commentId: Overload:RandomToolbox.SeedGenerators.SystemStartTimeSeed
  RandomToolbox.SeedGenerators:
    name:
      CSharp:
      - id: RandomToolbox.SeedGenerators
        name: SeedGenerators
        nameWithType: SeedGenerators
        qualifiedName: RandomToolbox.SeedGenerators
      VB:
      - id: RandomToolbox.SeedGenerators
        name: SeedGenerators
        nameWithType: SeedGenerators
        qualifiedName: RandomToolbox.SeedGenerators
    isDefinition: true
    commentId: T:RandomToolbox.SeedGenerators
  RandomToolbox.RandomSourceBaseSO.InitializeOnAwake:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
        name: InitializeOnAwake
        nameWithType: RandomSourceBaseSO.InitializeOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
        name: InitializeOnAwake
        nameWithType: RandomSourceBaseSO.InitializeOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
    isDefinition: true
    parent: RandomToolbox.RandomSourceBaseSO
    commentId: P:RandomToolbox.RandomSourceBaseSO.InitializeOnAwake
  RandomToolbox.RandomSourceBaseSO.ReseedOnAwake:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
        name: ReseedOnAwake
        nameWithType: RandomSourceBaseSO.ReseedOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
        name: ReseedOnAwake
        nameWithType: RandomSourceBaseSO.ReseedOnAwake
        qualifiedName: RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
    isDefinition: true
    parent: RandomToolbox.RandomSourceBaseSO
    commentId: P:RandomToolbox.RandomSourceBaseSO.ReseedOnAwake
  RandomToolbox.SystemRandomSource:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource
        name: SystemRandomSource
        nameWithType: SystemRandomSource
        qualifiedName: RandomToolbox.SystemRandomSource
      VB:
      - id: RandomToolbox.SystemRandomSource
        name: SystemRandomSource
        nameWithType: SystemRandomSource
        qualifiedName: RandomToolbox.SystemRandomSource
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.SystemRandomSource
  RandomToolbox.RandomSourceBaseSO.m_baseInstance:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBaseSO.m_baseInstance
        name: m_baseInstance
        nameWithType: RandomSourceBaseSO.m_baseInstance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
      VB:
      - id: RandomToolbox.RandomSourceBaseSO.m_baseInstance
        name: m_baseInstance
        nameWithType: RandomSourceBaseSO.m_baseInstance
        qualifiedName: RandomToolbox.RandomSourceBaseSO.m_baseInstance
    isDefinition: true
    parent: RandomToolbox.RandomSourceBaseSO
    commentId: P:RandomToolbox.RandomSourceBaseSO.m_baseInstance
  RandomToolbox.SystemRandomSourceSO.m_baseInstance*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSourceSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: SystemRandomSourceSO.m_baseInstance
        qualifiedName: RandomToolbox.SystemRandomSourceSO.m_baseInstance
      VB:
      - id: RandomToolbox.SystemRandomSourceSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: SystemRandomSourceSO.m_baseInstance
        qualifiedName: RandomToolbox.SystemRandomSourceSO.m_baseInstance
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSourceSO.m_baseInstance
  RandomToolbox.SystemRandomSourceSO:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSourceSO
        name: SystemRandomSourceSO
        nameWithType: SystemRandomSourceSO
        qualifiedName: RandomToolbox.SystemRandomSourceSO
      VB:
      - id: RandomToolbox.SystemRandomSourceSO
        name: SystemRandomSourceSO
        nameWithType: SystemRandomSourceSO
        qualifiedName: RandomToolbox.SystemRandomSourceSO
    isDefinition: true
    commentId: T:RandomToolbox.SystemRandomSourceSO
  RandomToolbox.RandomSourceBase.m_seed:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.m_seed
        name: m_seed
        nameWithType: RandomSourceBase.m_seed
        qualifiedName: RandomToolbox.RandomSourceBase.m_seed
      VB:
      - id: RandomToolbox.RandomSourceBase.m_seed
        name: m_seed
        nameWithType: RandomSourceBase.m_seed
        qualifiedName: RandomToolbox.RandomSourceBase.m_seed
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: F:RandomToolbox.RandomSourceBase.m_seed
  RandomToolbox.RandomSourceBase.SeedGenerator:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.SeedGenerator
        name: SeedGenerator
        nameWithType: RandomSourceBase.SeedGenerator
        qualifiedName: RandomToolbox.RandomSourceBase.SeedGenerator
      VB:
      - id: RandomToolbox.RandomSourceBase.SeedGenerator
        name: SeedGenerator
        nameWithType: RandomSourceBase.SeedGenerator
        qualifiedName: RandomToolbox.RandomSourceBase.SeedGenerator
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: F:RandomToolbox.RandomSourceBase.SeedGenerator
  RandomToolbox.RandomSourceBase.Seed:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Seed
        name: Seed
        nameWithType: RandomSourceBase.Seed
        qualifiedName: RandomToolbox.RandomSourceBase.Seed
      VB:
      - id: RandomToolbox.RandomSourceBase.Seed
        name: Seed
        nameWithType: RandomSourceBase.Seed
        qualifiedName: RandomToolbox.RandomSourceBase.Seed
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: P:RandomToolbox.RandomSourceBase.Seed
  RandomToolbox.RandomSourceBase.Start(System.Int32):
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Start(System.Int32)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.RandomSourceBase.Start(System.Int32)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: M:RandomToolbox.RandomSourceBase.Start(System.Int32)
  RandomToolbox.RandomSourceBase.Start(System.Boolean):
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Start(System.Boolean)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.RandomSourceBase.Start(System.Boolean)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: M:RandomToolbox.RandomSourceBase.Start(System.Boolean)
  RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator):
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: RandomToolbox.SeedGenerators.Generator
        name: SeedGenerators.Generator
        nameWithType: SeedGenerators.Generator
        qualifiedName: RandomToolbox.SeedGenerators.Generator
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: RandomToolbox.SeedGenerators.Generator
        name: SeedGenerators.Generator
        nameWithType: SeedGenerators.Generator
        qualifiedName: RandomToolbox.SeedGenerators.Generator
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: M:RandomToolbox.RandomSourceBase.Start(RandomToolbox.SeedGenerators.Generator)
  RandomToolbox.RandomSourceBase.Reseed:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Reseed
        name: Reseed
        nameWithType: RandomSourceBase.Reseed
        qualifiedName: RandomToolbox.RandomSourceBase.Reseed
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.RandomSourceBase.Reseed
        name: Reseed
        nameWithType: RandomSourceBase.Reseed
        qualifiedName: RandomToolbox.RandomSourceBase.Reseed
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: M:RandomToolbox.RandomSourceBase.Reseed
  RandomToolbox.SystemRandomSource.#ctor*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.#ctor*
        name: SystemRandomSource
        nameWithType: SystemRandomSource.SystemRandomSource
        qualifiedName: RandomToolbox.SystemRandomSource.SystemRandomSource
      VB:
      - id: RandomToolbox.SystemRandomSource.#ctor*
        name: SystemRandomSource
        nameWithType: SystemRandomSource.SystemRandomSource
        qualifiedName: RandomToolbox.SystemRandomSource.SystemRandomSource
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.#ctor
  RandomToolbox.RandomSourceBase.Start:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourceBase.Start
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: RandomToolbox.RandomSourceBase.Start
        name: Start
        nameWithType: RandomSourceBase.Start
        qualifiedName: RandomToolbox.RandomSourceBase.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: RandomToolbox.RandomSourceBase
    commentId: M:RandomToolbox.RandomSourceBase.Start
  RandomToolbox.SystemRandomSource.Start*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.Start*
        name: Start
        nameWithType: SystemRandomSource.Start
        qualifiedName: RandomToolbox.SystemRandomSource.Start
      VB:
      - id: RandomToolbox.SystemRandomSource.Start*
        name: Start
        nameWithType: SystemRandomSource.Start
        qualifiedName: RandomToolbox.SystemRandomSource.Start
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.Start
  RandomToolbox.SystemRandomSource.Next*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.Next*
        name: Next
        nameWithType: SystemRandomSource.Next
        qualifiedName: RandomToolbox.SystemRandomSource.Next
      VB:
      - id: RandomToolbox.SystemRandomSource.Next*
        name: Next
        nameWithType: SystemRandomSource.Next
        qualifiedName: RandomToolbox.SystemRandomSource.Next
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.Next
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  RandomToolbox.SystemRandomSource.NextBytes*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.NextBytes*
        name: NextBytes
        nameWithType: SystemRandomSource.NextBytes
        qualifiedName: RandomToolbox.SystemRandomSource.NextBytes
      VB:
      - id: RandomToolbox.SystemRandomSource.NextBytes*
        name: NextBytes
        nameWithType: SystemRandomSource.NextBytes
        qualifiedName: RandomToolbox.SystemRandomSource.NextBytes
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.NextBytes
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  RandomToolbox.SystemRandomSource.NextDouble*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.NextDouble*
        name: NextDouble
        nameWithType: SystemRandomSource.NextDouble
        qualifiedName: RandomToolbox.SystemRandomSource.NextDouble
      VB:
      - id: RandomToolbox.SystemRandomSource.NextDouble*
        name: NextDouble
        nameWithType: SystemRandomSource.NextDouble
        qualifiedName: RandomToolbox.SystemRandomSource.NextDouble
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.NextDouble
  RandomToolbox.SystemRandomSource.State:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.State
        name: SystemRandomSource.State
        nameWithType: SystemRandomSource.State
        qualifiedName: RandomToolbox.SystemRandomSource.State
      VB:
      - id: RandomToolbox.SystemRandomSource.State
        name: SystemRandomSource.State
        nameWithType: SystemRandomSource.State
        qualifiedName: RandomToolbox.SystemRandomSource.State
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.SystemRandomSource.State
  RandomToolbox.SystemRandomSource.Save*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.Save*
        name: Save
        nameWithType: SystemRandomSource.Save
        qualifiedName: RandomToolbox.SystemRandomSource.Save
      VB:
      - id: RandomToolbox.SystemRandomSource.Save*
        name: Save
        nameWithType: SystemRandomSource.Save
        qualifiedName: RandomToolbox.SystemRandomSource.Save
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.Save
  RandomToolbox.SystemRandomSource.Restore*:
    name:
      CSharp:
      - id: RandomToolbox.SystemRandomSource.Restore*
        name: Restore
        nameWithType: SystemRandomSource.Restore
        qualifiedName: RandomToolbox.SystemRandomSource.Restore
      VB:
      - id: RandomToolbox.SystemRandomSource.Restore*
        name: Restore
        nameWithType: SystemRandomSource.Restore
        qualifiedName: RandomToolbox.SystemRandomSource.Restore
    isDefinition: true
    commentId: Overload:RandomToolbox.SystemRandomSource.Restore
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  RandomToolbox.UnityRandomSource:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource
        name: UnityRandomSource
        nameWithType: UnityRandomSource
        qualifiedName: RandomToolbox.UnityRandomSource
      VB:
      - id: RandomToolbox.UnityRandomSource
        name: UnityRandomSource
        nameWithType: UnityRandomSource
        qualifiedName: RandomToolbox.UnityRandomSource
    isDefinition: true
    parent: RandomToolbox
    commentId: T:RandomToolbox.UnityRandomSource
  RandomToolbox.UnityRandomSourceSO.m_baseInstance*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSourceSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: UnityRandomSourceSO.m_baseInstance
        qualifiedName: RandomToolbox.UnityRandomSourceSO.m_baseInstance
      VB:
      - id: RandomToolbox.UnityRandomSourceSO.m_baseInstance*
        name: m_baseInstance
        nameWithType: UnityRandomSourceSO.m_baseInstance
        qualifiedName: RandomToolbox.UnityRandomSourceSO.m_baseInstance
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSourceSO.m_baseInstance
  RandomToolbox.UnityRandomSourceSO:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSourceSO
        name: UnityRandomSourceSO
        nameWithType: UnityRandomSourceSO
        qualifiedName: RandomToolbox.UnityRandomSourceSO
      VB:
      - id: RandomToolbox.UnityRandomSourceSO
        name: UnityRandomSourceSO
        nameWithType: UnityRandomSourceSO
        qualifiedName: RandomToolbox.UnityRandomSourceSO
    isDefinition: true
    commentId: T:RandomToolbox.UnityRandomSourceSO
  RandomToolbox.UnityRandomSource.#ctor*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.#ctor*
        name: UnityRandomSource
        nameWithType: UnityRandomSource.UnityRandomSource
        qualifiedName: RandomToolbox.UnityRandomSource.UnityRandomSource
      VB:
      - id: RandomToolbox.UnityRandomSource.#ctor*
        name: UnityRandomSource
        nameWithType: UnityRandomSource.UnityRandomSource
        qualifiedName: RandomToolbox.UnityRandomSource.UnityRandomSource
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.#ctor
  RandomToolbox.UnityRandomSource.Start*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.Start*
        name: Start
        nameWithType: UnityRandomSource.Start
        qualifiedName: RandomToolbox.UnityRandomSource.Start
      VB:
      - id: RandomToolbox.UnityRandomSource.Start*
        name: Start
        nameWithType: UnityRandomSource.Start
        qualifiedName: RandomToolbox.UnityRandomSource.Start
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.Start
  RandomToolbox.UnityRandomSource.value*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.value*
        name: value
        nameWithType: UnityRandomSource.value
        qualifiedName: RandomToolbox.UnityRandomSource.value
      VB:
      - id: RandomToolbox.UnityRandomSource.value*
        name: value
        nameWithType: UnityRandomSource.value
        qualifiedName: RandomToolbox.UnityRandomSource.value
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.value
  Global.Quaternion:
    name:
      CSharp:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  RandomToolbox.UnityRandomSource.rotation*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.rotation*
        name: rotation
        nameWithType: UnityRandomSource.rotation
        qualifiedName: RandomToolbox.UnityRandomSource.rotation
      VB:
      - id: RandomToolbox.UnityRandomSource.rotation*
        name: rotation
        nameWithType: UnityRandomSource.rotation
        qualifiedName: RandomToolbox.UnityRandomSource.rotation
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.rotation
  RandomToolbox.UnityRandomSource.rotationUniform*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.rotationUniform*
        name: rotationUniform
        nameWithType: UnityRandomSource.rotationUniform
        qualifiedName: RandomToolbox.UnityRandomSource.rotationUniform
      VB:
      - id: RandomToolbox.UnityRandomSource.rotationUniform*
        name: rotationUniform
        nameWithType: UnityRandomSource.rotationUniform
        qualifiedName: RandomToolbox.UnityRandomSource.rotationUniform
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.rotationUniform
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Vector2'
  RandomToolbox.UnityRandomSource.insideUnitCircle*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.insideUnitCircle*
        name: insideUnitCircle
        nameWithType: UnityRandomSource.insideUnitCircle
        qualifiedName: RandomToolbox.UnityRandomSource.insideUnitCircle
      VB:
      - id: RandomToolbox.UnityRandomSource.insideUnitCircle*
        name: insideUnitCircle
        nameWithType: UnityRandomSource.insideUnitCircle
        qualifiedName: RandomToolbox.UnityRandomSource.insideUnitCircle
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.insideUnitCircle
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  RandomToolbox.UnityRandomSource.insideUnitSphere*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.insideUnitSphere*
        name: insideUnitSphere
        nameWithType: UnityRandomSource.insideUnitSphere
        qualifiedName: RandomToolbox.UnityRandomSource.insideUnitSphere
      VB:
      - id: RandomToolbox.UnityRandomSource.insideUnitSphere*
        name: insideUnitSphere
        nameWithType: UnityRandomSource.insideUnitSphere
        qualifiedName: RandomToolbox.UnityRandomSource.insideUnitSphere
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.insideUnitSphere
  RandomToolbox.UnityRandomSource.onUnitSphere*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.onUnitSphere*
        name: onUnitSphere
        nameWithType: UnityRandomSource.onUnitSphere
        qualifiedName: RandomToolbox.UnityRandomSource.onUnitSphere
      VB:
      - id: RandomToolbox.UnityRandomSource.onUnitSphere*
        name: onUnitSphere
        nameWithType: UnityRandomSource.onUnitSphere
        qualifiedName: RandomToolbox.UnityRandomSource.onUnitSphere
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.onUnitSphere
  RandomToolbox.UnityRandomSource.ColorHSV*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.ColorHSV*
        name: ColorHSV
        nameWithType: UnityRandomSource.ColorHSV
        qualifiedName: RandomToolbox.UnityRandomSource.ColorHSV
      VB:
      - id: RandomToolbox.UnityRandomSource.ColorHSV*
        name: ColorHSV
        nameWithType: UnityRandomSource.ColorHSV
        qualifiedName: RandomToolbox.UnityRandomSource.ColorHSV
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.ColorHSV
  RandomToolbox.UnityRandomSource.Range*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.Range*
        name: Range
        nameWithType: UnityRandomSource.Range
        qualifiedName: RandomToolbox.UnityRandomSource.Range
      VB:
      - id: RandomToolbox.UnityRandomSource.Range*
        name: Range
        nameWithType: UnityRandomSource.Range
        qualifiedName: RandomToolbox.UnityRandomSource.Range
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.Range
  System.Random.State:
    name:
      CSharp:
      - id: System.Random.State
        name: Random.State
        nameWithType: Random.State
        qualifiedName: System.Random.State
        isExternal: true
      VB:
      - id: System.Random.State
        name: Random.State
        nameWithType: Random.State
        qualifiedName: System.Random.State
        isExternal: true
    isDefinition: true
  RandomToolbox.UnityRandomSource.Save*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.Save*
        name: Save
        nameWithType: UnityRandomSource.Save
        qualifiedName: RandomToolbox.UnityRandomSource.Save
      VB:
      - id: RandomToolbox.UnityRandomSource.Save*
        name: Save
        nameWithType: UnityRandomSource.Save
        qualifiedName: RandomToolbox.UnityRandomSource.Save
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.Save
  RandomToolbox.UnityRandomSource.Restore*:
    name:
      CSharp:
      - id: RandomToolbox.UnityRandomSource.Restore*
        name: Restore
        nameWithType: UnityRandomSource.Restore
        qualifiedName: RandomToolbox.UnityRandomSource.Restore
      VB:
      - id: RandomToolbox.UnityRandomSource.Restore*
        name: Restore
        nameWithType: UnityRandomSource.Restore
        qualifiedName: RandomToolbox.UnityRandomSource.Restore
    isDefinition: true
    commentId: Overload:RandomToolbox.UnityRandomSource.Restore
  RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh*
        name: PartitionCorrectionWhenSumTooHigh
        nameWithType: PartitionTester.PartitionCorrectionWhenSumTooHigh
        qualifiedName: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh
      VB:
      - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh*
        name: PartitionCorrectionWhenSumTooHigh
        nameWithType: PartitionTester.PartitionCorrectionWhenSumTooHigh
        qualifiedName: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooHigh
  RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow*
        name: PartitionCorrectionWhenSumTooLow
        nameWithType: PartitionTester.PartitionCorrectionWhenSumTooLow
        qualifiedName: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow
      VB:
      - id: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow*
        name: PartitionCorrectionWhenSumTooLow
        nameWithType: PartitionTester.PartitionCorrectionWhenSumTooLow
        qualifiedName: RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionTester.PartitionCorrectionWhenSumTooLow
  RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne*
        name: NoPartitionCorrectionWhenSumIsOne
        nameWithType: PartitionTester.NoPartitionCorrectionWhenSumIsOne
        qualifiedName: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne
      VB:
      - id: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne*
        name: NoPartitionCorrectionWhenSumIsOne
        nameWithType: PartitionTester.NoPartitionCorrectionWhenSumIsOne
        qualifiedName: RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionTester.NoPartitionCorrectionWhenSumIsOne
  RandomToolbox.PartitionTester.TestAddElement*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester.TestAddElement*
        name: TestAddElement
        nameWithType: PartitionTester.TestAddElement
        qualifiedName: RandomToolbox.PartitionTester.TestAddElement
      VB:
      - id: RandomToolbox.PartitionTester.TestAddElement*
        name: TestAddElement
        nameWithType: PartitionTester.TestAddElement
        qualifiedName: RandomToolbox.PartitionTester.TestAddElement
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionTester.TestAddElement
  RandomToolbox.PartitionTester.TestAddElementGeneric*:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester.TestAddElementGeneric*
        name: TestAddElementGeneric
        nameWithType: PartitionTester.TestAddElementGeneric
        qualifiedName: RandomToolbox.PartitionTester.TestAddElementGeneric
      VB:
      - id: RandomToolbox.PartitionTester.TestAddElementGeneric*
        name: TestAddElementGeneric
        nameWithType: PartitionTester.TestAddElementGeneric
        qualifiedName: RandomToolbox.PartitionTester.TestAddElementGeneric
    isDefinition: true
    commentId: Overload:RandomToolbox.PartitionTester.TestAddElementGeneric
  RandomToolbox.PartitionTester:
    name:
      CSharp:
      - id: RandomToolbox.PartitionTester
        name: PartitionTester
        nameWithType: PartitionTester
        qualifiedName: RandomToolbox.PartitionTester
      VB:
      - id: RandomToolbox.PartitionTester
        name: PartitionTester
        nameWithType: PartitionTester
        qualifiedName: RandomToolbox.PartitionTester
    isDefinition: true
    commentId: T:RandomToolbox.PartitionTester
  RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact*
        name: MultipleSeedSystemInstanceAsNoImpact
        nameWithType: RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
        qualifiedName: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
      VB:
      - id: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact*
        name: MultipleSeedSystemInstanceAsNoImpact
        nameWithType: RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
        qualifiedName: RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourcesTests.MultipleSeedSystemInstanceAsNoImpact
  RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact*
        name: ExternUnityEngineRandomCallAsNoImpact
        nameWithType: RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
        qualifiedName: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
      VB:
      - id: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact*
        name: ExternUnityEngineRandomCallAsNoImpact
        nameWithType: RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
        qualifiedName: RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourcesTests.ExternUnityEngineRandomCallAsNoImpact
  RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom*
        name: UnityRandomSourceRestartDoesntImpactUnityEngineRandom
        nameWithType: RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
        qualifiedName: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
      VB:
      - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom*
        name: UnityRandomSourceRestartDoesntImpactUnityEngineRandom
        nameWithType: RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
        qualifiedName: RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourcesTests.UnityRandomSourceRestartDoesntImpactUnityEngineRandom
  RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore*
        name: UnityRandomSourceSaveAndRestore
        nameWithType: RandomSourcesTests.UnityRandomSourceSaveAndRestore
        qualifiedName: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore
      VB:
      - id: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore*
        name: UnityRandomSourceSaveAndRestore
        nameWithType: RandomSourcesTests.UnityRandomSourceSaveAndRestore
        qualifiedName: RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourcesTests.UnityRandomSourceSaveAndRestore
  RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore*:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore*
        name: SystemRandomSourceSaveAndRestore
        nameWithType: RandomSourcesTests.SystemRandomSourceSaveAndRestore
        qualifiedName: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore
      VB:
      - id: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore*
        name: SystemRandomSourceSaveAndRestore
        nameWithType: RandomSourcesTests.SystemRandomSourceSaveAndRestore
        qualifiedName: RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore
    isDefinition: true
    commentId: Overload:RandomToolbox.RandomSourcesTests.SystemRandomSourceSaveAndRestore
  RandomToolbox.RandomSourcesTests:
    name:
      CSharp:
      - id: RandomToolbox.RandomSourcesTests
        name: RandomSourcesTests
        nameWithType: RandomSourcesTests
        qualifiedName: RandomToolbox.RandomSourcesTests
      VB:
      - id: RandomToolbox.RandomSourcesTests
        name: RandomSourcesTests
        nameWithType: RandomSourcesTests
        qualifiedName: RandomToolbox.RandomSourcesTests
    isDefinition: true
    commentId: T:RandomToolbox.RandomSourcesTests
